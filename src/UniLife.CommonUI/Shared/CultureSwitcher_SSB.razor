@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IMatToaster matToaster
@inject IJSRuntime JSRuntime;

<select @onchange="OnSelected">
    <option hidden>@culture</option>
    <option value="tr">Türkçe (tr)</option>
    <option value="en-US">English (en-US)</option>
    <option value="de">German (de)</option>
    <option value="fr">French (fr)</option>
    <option value="ar">Arabic (ar)</option>
    <option value="zh">Chinese (zh)</option>
</select>

@code { private string culture { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            this.culture = System.Globalization.CultureInfo.CurrentCulture.Name;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("jsInterops.logla", ex.Message + "inner:" + ex.InnerException + "stack:" + ex.StackTrace, MatToastType.Danger);
            throw;
        }

    }

    private async Task OnSelected(ChangeEventArgs e)
    {
        try
        {

            var culture = (string)e.Value;

            var uri = new Uri(NavigationManager.Uri)
        .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
            var query = $"?culture={Uri.EscapeDataString(culture)}&" +
                $"redirectUri={Uri.EscapeDataString(uri)}";

            await JSRuntime.InvokeVoidAsync("jsInterops.logla", query+"asd");

            NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("jsInterops.logla", ex.Message + "inner:" + ex.InnerException.Message + "stack:" + ex.StackTrace, MatToastType.Danger);
            //throw;
        }

    } }
@using Syncfusion.Blazor.Data
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.Grids
<Dialog Baslik="Programlar" @bind-isDialogOpen="@isProgramDialogOpen">
    <div class="row">
        <SfGrid ID="ProgramGrid" @ref="ProgramGrid" TValue="ProgramDto" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowFiltering="true">
            <SfDataManager Url="odata/programs?$expand=bolum($expand=fakulte($select=Ad,Id);$select=Ad,Id)&$select=Ad,Id" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
            <GridEvents TValue="ProgramDto" CommandClicked="CommandClickedProgram"></GridEvents>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(ProgramDto.Id) IsPrimaryKey="true" TextAlign="TextAlign.Right"></GridColumn>
                <GridColumn Field="Bolum.Fakulte.Ad" HeaderText="Fakulte"></GridColumn>
                <GridColumn Field="Bolum.Ad" HeaderText="Bolum"></GridColumn>
                <GridColumn Field=@nameof(ProgramDto.Ad) HeaderText="Program"></GridColumn>
                <GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Program Ekle" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-Circle_Add", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</Dialog>
@code{
    SfGrid<ProgramDto> ProgramGrid;

    [Parameter]
    public EventCallback<ProgramDto> CommandClickHandlerProgram { get; set; }

    public async Task CommandClickedProgram(Syncfusion.Blazor.Grids.CommandClickEventArgs<ProgramDto> args)
    {
        if (args.CommandColumn.Title == "Program Ekle")
        {
            await CommandClickHandlerProgram.InvokeAsync(args.RowData);
            isProgramDialogOpen = false;
        }
    }

    private bool _value;
    [Parameter]
    public bool isProgramDialogOpen
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            isProgramDialogOpenChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> isProgramDialogOpenChanged { get; set; }
}

@page "/datagrid/detail-template"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using UniLife.Shared.DataModels
@inject System.Net.Http.HttpClient Http;
@using System.Net.Http.Json
@using System.Threading.Tasks
@using UniLife.CommonUI.Extensions


@inherits SampleBaseComponent;
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="SinavGrid" DataSource="@SinavDtos" Toolbar="@(Toolbaritems)" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
                <GridEvents RowSelected="RowSelectedHandlerSinav" OnActionComplete="ActionCompletedHandler" OnToolbarClick="ToolbarClickHandler" TValue="SinavDto"></GridEvents>
                <GridSelectionSettings></GridSelectionSettings>
                <GridEditSettings Dialog="DialogParams" ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog">
                    <Template>
                        @{
                            SinavDto sinavInfo = (context as SinavDto);
                        }


                        <div class="form-row mt-2">
                            <div class="col-12 pb-2">
                                <div class="form-row">
                                    <label class="col-md-3 col-form-label" for="SinavTipId">Sinav Tip</label>
                                    
                                    <label class="col-md-3 col-form-label" for="SinavTurId">Sinav Tur</label>
                                  
                                    <label class="col-md-3 col-form-label" for="EtkiOran">EtkiOran (%)</label>
                                    <SfNumericTextBox CssClass="form-control col-sm-9" ID="EtkiOran" Min="0" Max="100" @bind-Value="@(sinavInfo.EtkiOran)" TValue="int?" Format=n0></SfNumericTextBox>
                                    <label class="col-md-3 col-form-label" for="Tarih">Zaman</label>
                                    <SfDateTimePicker CssClass="form-control col-sm-9" ID="Tarih" TValue="DateTime?" @bind-Value="@(sinavInfo.Tarih)" Placeholder="Lütfen bir tarih seçiniz."></SfDateTimePicker>
                                </div>
                            </div>

                        </div>

                    </Template>
                </GridEditSettings>
                <GridColumns>
                    <GridColumn Visible="false" Field=@nameof(SinavDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                    <GridColumn Field=@nameof(SinavDto.Tarih) HeaderText="Tarih"></GridColumn>
                    
                    @*<GridColumn Field=@nameof(SinavDto.KisaAd) HeaderText="Kısa Ad"></GridColumn>*@
                    @*<GridColumn Field=@nameof(SinavDto.SablonAd) HeaderText="Ad Şablon"></GridColumn>*@
                    <GridColumn Field=@nameof(SinavDto.EtkiOran) HeaderText="%"></GridColumn>
                    <GridColumn Field=@nameof(SinavDto.OgrCount) HeaderText="Ö.Sayı"></GridColumn>

                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

<input type="button" @onclick="Remove" value="remove" />



@code{


    Syncfusion.Blazor.Grids.SfGrid<SinavDto> SinavGrid;
    public List<SinavDto> SinavDtos = new List<SinavDto>();
    async Task Remove()
    {
        SinavDtos = new List<SinavDto>();
    }


    protected override async Task OnInitializedAsync()
    {
        ApiResponseDto<List<SinavDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<SinavDto>>>($"api/Sinav/GetSinavListByAcilanDersId/{49}");
        if (apiResponse.StatusCode == Microsoft.AspNetCore.Http.StatusCodes.Status200OK)
        {
            SinavDtos = apiResponse.Result;

            if (apiResponse.Result.Count < 1)
            {
                //SinavDtos.RemoveAll(x => true);
            }
            SinavGrid.Refresh();
        }
        else
        {
            SinavDtos = new List<SinavDto>();

        }
    }

    public void ActionCompletedHandler(Syncfusion.Blazor.Grids.ActionEventArgs<SinavDto> args)
    {

    }


    public async Task RowSelectedHandlerSinav(Syncfusion.Blazor.Grids.RowSelectEventArgs<SinavDto> args)
    {


    }


    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "ColumnChooser", new ItemModel() { Text = "Mazeret Sınavı", TooltipText = "Seçilenm Sınavın Mazereti", PrefixIcon = "e-click", Id = "Mazeret" } };

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

    }

    private DialogSettings DialogParams = new DialogSettings { MinHeight = "300px", Width = "400px", };
}
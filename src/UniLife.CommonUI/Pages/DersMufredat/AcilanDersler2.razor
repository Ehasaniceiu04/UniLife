@page "/acilandersler2"
@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using System.Net
@using Newtonsoft.Json


<SfGrid DataSource="@dersAcilanDtos" Height="315" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
    <GridEvents OnActionComplete="ActionCompletedHandler" TValue="DersAcilanDto"></GridEvents>
    <GridColumns>
        @*<GridColumn Field=@nameof(DersAcilanDto.Id) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.ProgramId) HeaderText="Program" ForeignKeyValue="Ad" DataSource="@programDtos" Width="150"></GridColumn>*@


        <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="Açılan Ders ID" Edit="false" AllowEditing="false" TextAlign="TextAlign.Left" Width="140"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Kod) HeaderText="Kod"></GridColumn>
        @*<GridColumn Field=@nameof(DersAcilanDto.Kredi) HeaderText="T+U TODO"></GridColumn>*@
        <GridColumn Field=@nameof(DersAcilanDto.Kredi) HeaderText="Kr"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Akts) HeaderText="Akts"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Sinif) HeaderText="Sinif"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Zorunlu) HeaderText="Z" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true"></GridColumn>
        @*<GridColumn Field=@nameof(DersAcilanDto.ProgramAd) HeaderText="Program"></GridColumn>*@
        <GridColumn Field=@nameof(DersAcilanDto.ProgramId) HeaderText="Program" ForeignKeyValue="Ad" DataSource="@programDtos" Width="150"></GridColumn>
       
        
    </GridColumns>
</SfGrid>

@code{

    SfGrid<DersAcilanDto> DersAcilanGrid;

    List<DersAcilanDto> dersAcilanDtos { get; set; }

    List<ProgramDto> programDtos { get; set; }
    List<AkademisyenDto> akademisyenDtos { get; set; }


    public void Change(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        if (args.Value == null)
        {
            DersAcilanGrid.ClearFiltering();
        }
        else
        {
            //startswith
            DersAcilanGrid.FilterByColumn("ProgramId", "equal", 1);
        }
    }


    protected override void OnInitialized()
    {
        ReadDersAcilans();

        ReadPrograms();
        ReadAkademisyens();
    }

    void ReadDersAcilans()
    {

        ApiResponseDto apiResponse = Http.GetFromJsonAsync<ApiResponseDto>("api/dersAcilan").Result;

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Açılan Dersler getirildi");
            dersAcilanDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<DersAcilanDto[]>(apiResponse.Result.ToString()).ToList<DersAcilanDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Açılan Ders bilgisi getirilirken hata oluştu!");
        }
    }

    void ReadPrograms()
    {
        ApiResponseDto<List<ProgramDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<ProgramDto>>>("api/program").Result;
        programDtos = apiResponse.Result;
    }
    void ReadAkademisyens()
    {
        ApiResponseDto<List<AkademisyenDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<AkademisyenDto>>>("api/akademisyen").Result;
        akademisyenDtos = apiResponse.Result;
    }



    public void ActionCompletedHandler(ActionEventArgs<DersAcilanDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(DersAcilanDto dersAcilanDto)
    {
        try
        {
            ApiResponseDto<DersAcilanDto> apiResponse = await Http.PostJsonAsync<ApiResponseDto<DersAcilanDto>>
                ("api/dersAcilan", dersAcilanDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                dersAcilanDtos.FirstOrDefault(x => x.Id == 0).Id = apiResponse.Result.Id;
                DersAcilanGrid.Refresh();
            }
            else
            {
                dersAcilanDtos.Remove(dersAcilanDto);
                DersAcilanGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Açılan Ders Creation Failed");
            }
        }
        catch (Exception ex)
        {
            dersAcilanDtos.Remove(dersAcilanDto);
            DersAcilanGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Açılan Ders Creation Failed");
        }
    }

    public async void Update(DersAcilanDto dersAcilanDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/dersAcilan", dersAcilanDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Açılan Ders Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Açılan Ders Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(DersAcilanDto dersAcilanDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/dersAcilan/" + dersAcilanDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Açılan Ders Deleted", MatToastType.Success);
                dersAcilanDtos.Remove(dersAcilanDto);
            }
            else
            {
                matToaster.Add("Açılan Ders Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Açılan Ders Save Failed");
        }
    }

}

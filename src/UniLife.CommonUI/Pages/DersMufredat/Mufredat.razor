@page "/mufredat"
@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Calendars
@using System.Net
@using Newtonsoft.Json
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@inject AppState appState
<style>
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #e83e8c;
    }

    .col-form-label-sm {
        font-size: .775rem;
    }
</style>

@*DataSource="@mufredatDtos"*@
<SfGrid Width="100%" @ref="MufredatGrid" ID="MufredatGrid" TValue="MufredatDto" Query="@totalQuery" ShowColumnChooser="true" AllowSorting="true" AllowFiltering="true" AllowPaging="true" Toolbar="Toolbaritems"
        ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Ders Tanımla", Target = ".e-content", Id = "copywithheader" } })">
    <SfDataManager Url="@OdataQuery" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
    <GridEvents ContextMenuItemClicked="OnContextMenuClick" CommandClicked="CommandClickHandler" OnActionBegin="OnActionBeginHandler" OnToolbarClick="ToolbarClickHandler" OnActionComplete="ActionCompletedHandler" TValue="MufredatDto"></GridEvents>
    <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog">
        <Template>
            @{
                MufredatDto mufredatInfo = (context as MufredatDto);
                <div class="row pb-2 bg-light text-dark">
                    <div class="col-sm-12 col-md-4">
                        @*<FakBolPrg @bind-ProgramId="programId"*@

                        <FakBolPrg @bind-ProgramId="@(mufredatInfo.ProgramId)"
                                   @bind-BolumId="bolumId"
                                   @bind-FakulteId="fakulteId"
                                   ProgramPlaceHolder="@(plazceHolderProgramAd)"></FakBolPrg>
                    </div>
                    <div class="col-sm-12 col-md-8">
                        <div class="form-group row">
                            <label for="Ad" class="col-sm-2 col-form-label-sm">Müfredat Ad</label>
                            <div class="col-sm-4">
                                <SfTextBox ID="Ad" Placeholder="Müfredat Ad" CssClass="form-control-sm" @bind-Value="@(mufredatInfo.Ad)"></SfTextBox>
                            </div>
                            <label for="Yil" class="col-sm-2 col-form-label-sm">Yil</label>
                            <div class="col-sm-4">
                                <SfNumericTextBox ID="Yil" Placeholder="Yil" CssClass="form-control-sm" @bind-Value="@(mufredatInfo.Yil)"></SfNumericTextBox>
                            </div>
                        </div>
                        <div class="form-group  row">
                            <label for="BasTarih" class="col-sm-2 col-form-label-sm">BasTarih</label>
                            <div class="col-sm-4">
                                <SfDatePicker ID="BasTarih" @bind-Value="@mufredatInfo.BasTarih" Placeholder="Kayıt Tarihi"></SfDatePicker>
                            </div>
                            <label for="BitTarih" class="col-sm-2 col-form-label-sm">BitTarih</label>
                            <div class="col-sm-4">
                                <SfDatePicker ID="BitTarih" @bind-Value="@mufredatInfo.BitTarih" Placeholder="Bitiş Tarihi"></SfDatePicker>
                            </div>
                        </div>
                        <div class="form-group  row">
                            <label for="KararTarih" class="col-sm-2 col-form-label-sm">Karar Tarih</label>
                            <div class="col-sm-4">
                                <SfDatePicker ID="KararTarih" @bind-Value="@mufredatInfo.KararTarih" Placeholder="Karar Tarihi"></SfDatePicker>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
        <GridColumn Visible="false" Field=@nameof(MufredatDto.Id) HeaderText="Müfredat ID" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
        <GridColumn Field=@nameof(MufredatDto.Ad) AllowEditing="true" HeaderText="Müfredat İsim" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
        <GridColumn Field=@nameof(MufredatDto.Yil) HeaderText="Müfredat Yıl" Format="####" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
        <GridColumn AutoFit="true" Field=@nameof(MufredatDto.BasTarih) HeaderText="BasTarih" Format="d" EditType="EditType.DatePickerEdit" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
        <GridColumn AutoFit="true" Field=@nameof(MufredatDto.BitTarih) HeaderText="Bit Tarih" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
        <GridColumn AutoFit="true" Field=@nameof(MufredatDto.KararTarih) HeaderText="KararTarih" Format="d" EditType="EditType.DatePickerEdit"></GridColumn>
        @*<GridColumn Field=@nameof(MufredatDto.ProgramId) HeaderText="Program" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@programDtos"></GridColumn>*@
        <GridColumn Field="Program.Ad" HeaderText="Program" Type="ColumnType.String"></GridColumn>
        <GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="DersOlus" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.None" Title="Clone" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-copy", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-update", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

<MatDialog @bind-IsOpen="@multiDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        "@mufredatDto.Ad" isimli müfredatı çoklamak istediğinize emin misiniz?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { multiDialogOpen = false; })">Kapat</MatButton>
        <MatButton OnClick="@MultiplyRecord">Çokla</MatButton>
    </MatDialogActions>
</MatDialog>

@code{

    int? fakulteId;
    int? bolumId;
    //int? programId;
    int? ProgramValueHolder;

    string plazceHolderProgramAd = "";

    string OdataQuery = "odata/Mufredats";
    public Query totalQuery = new Query().AddParams("$expand", "program($select=Id,Ad)");



    SfGrid<MufredatDto> MufredatGrid;

    public MufredatDto mufredatDto { get; set; } = new MufredatDto(); // Holds Mufredat being actively modified or created
                                                                      //[CascadingParameter]
                                                                      //public MufredatDto SelectedMufredat { get; set; }


    //List<MufredatDto> mufredatDtos = new List<MufredatDto>();
    //List<ProgramDto> programDtos = new List<ProgramDto>();

    private List<Object> Toolbaritems = new List<Object>() { "Add", "Search", "Paste", "Copy", "ColumnChooser", new ItemModel() { Text = "Dersleri Aç", TooltipText = "Click", PrefixIcon = "e-icons e-DoubleArrowRight", Id = "DersleriAc" } };

    bool multiDialogOpen = false;



    protected override void OnInitialized()
    {
        //ReadMufredats();
        //ApiResponseDto<List<ProgramDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<ProgramDto>>>("api/program").Result;
        //programDtos = apiResponse.Result;
    }

    //void ReadMufredats()
    //{

    //    ApiResponseDto<List<MufredatDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<MufredatDto>>>("api/mufredat").Result;

    //    if (apiResponse.StatusCode == Status200OK)
    //    {
    //        matToaster.Add(apiResponse.Message, MatToastType.Success, "Müfredatlar getirildi");
    //        mufredatDtos = apiResponse.Result;
    //    }
    //    else
    //    {
    //        matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat bilgisi getirilirken hata oluştu!");
    //    }
    //}

    public async Task MultiplyRecord()
    {
        //Todo: Burayı odatalı girde göre yeniden yazcaz<

        //try
        //{

        //    ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/mufredat/Cokla/" + mufredatDto.Id);
        //    if (apiResponse.StatusCode == Status200OK)
        //    {
        //        matToaster.Add(apiResponse.Message, MatToastType.Success);
        //        ReadMufredats();
        //    }
        //    else
        //    {
        //        mufredatDtos.Remove(mufredatDto);
        //        MufredatGrid.Refresh();
        //        matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Creation Failed");
        //    }
        //}
        //catch (Exception ex)
        //{
        //    mufredatDtos.Remove(mufredatDto);
        //    MufredatGrid.Refresh();
        //    matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Creation Failed");
        //}
        //finally
        //{
        //    MufredatGrid.Refresh();
        //}
    }

    //Sağ Click için
    public void OnContextMenuClick(ContextMenuClickEventArgs<MufredatDto> args)
    {
        if (args.Item.Id == "copywithheader")
        {
            //this.DefaultGrid.Copy(true);
        }
    }


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "DersleriAc")
        {
            IntEnumarableDto intEnumarableDto = new IntEnumarableDto();
            intEnumarableDto.EnumerableList = (await MufredatGrid.GetSelectedRecords()).Select(x => x.Id);

            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/mufredat/CreateDersAcilansByMufredatIds", intEnumarableDto);

            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success, "Başarılı");
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Ders açma işlemi başarısız oldu.");
            }
        }
    }

    public void CommandClickHandler(CommandClickEventArgs<MufredatDto> args)
    {
        //Perform your custom command button click operation here. And also with the value in “args” you can differentiate the buttons, if having multiple custom command buttons.

        if (args.CommandColumn.Title == "Clone")
        {
            mufredatDto = args.RowData;
            multiDialogOpen = true;
        }
        if (args.CommandColumn.Title == "DersOlus")
        {

            ApiResponseDto<MufredatStateDto> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<MufredatStateDto>>($"api/mufredat/GetMufredatState/{args.RowData.Id}").Result;
            appState.MufredatState = apiResponse.Result;


            //mufredatDto = args.RowData;
            ////appState.MufredatState = mufredatDto.DeepClone();
            //mufredatDto.Program = programDtos.FirstOrDefault(x => x.Id == mufredatDto.ProgramId);
            //if (mufredatDto.Program == null)
            //{
            //    matToaster.Add("Program Bulunamadı", MatToastType.Danger, "Müfredat ders ekleme hatası");
            //    return;
            //}
            //appState.MufredatState = mufredatDto;
            ////base.InvokeAsync(StateHasChanged);

            TabDegis.InvokeAsync(1);

        }
    }

    [Parameter]
    public EventCallback<int> TabDegis { get; set; }


    public async Task OnActionBeginHandler(Syncfusion.Blazor.Grids.ActionEventArgs<MufredatDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            plazceHolderProgramAd = "";
            ProgramValueHolder = null;
            fakulteId = null;
            bolumId = null;

            //await ActionCompletedHandler(args);
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            fakulteId = null;
            bolumId = null;
            plazceHolderProgramAd = args.Data.Program.Ad; // ((UniLife.Shared.Dto.Definitions.ProgramDto)args.ForeignKeyData.Values.FirstOrDefault().FirstOrDefault()).Ad;

            //await ActionCompletedHandler(args);
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            if (!args.Data.ProgramId.HasValue)
            {
                args.Data.ProgramId = ProgramValueHolder;
            }


        }

        await ActionCompletedHandler(args);

    }

    public async Task ActionCompletedHandler(ActionEventArgs<MufredatDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            ProgramValueHolder = args.Data.ProgramId;
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                if (!args.Data.ProgramId.HasValue)
                {
                    args.Data.ProgramId = ProgramValueHolder;
                }
                await Update(args.Data);
                MufredatGrid.Refresh();
                args.Cancel = true;
                await MufredatGrid.CloseEdit();
            }
            else if (args.Action == "Add")
            {
                //args.Data.ProgramId = programId;
                await Create(args.Data);
                MufredatGrid.Refresh();
                args.Cancel = true;
                await MufredatGrid.CloseEdit();
            }

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await Delete(args.Data);
            MufredatGrid.Refresh();
            args.Cancel = true;
            await MufredatGrid.CloseEdit();
        }
    }

    public async Task Create(MufredatDto mufredatDto)
    {
        try
        {
            mufredatDto.Program = null;
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                ("api/mufredat", mufredatDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                var recordedDto = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto>(apiResponse.Result.ToString());

                //mufredatDtos.FirstOrDefault(x => x.Id == 0).Id = recordedDto.Id;
                //MufredatGrid.Refresh();
            }
            else
            {
                //mufredatDtos.Remove(mufredatDto);
                //MufredatGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //mufredatDtos.Remove(mufredatDto);
            MufredatGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Creation Failed");
        }
    }


    public async Task Update(MufredatDto mufredatDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/mufredat", mufredatDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(MufredatDto mufredatDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/mufredat/" + mufredatDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Müfredat Deleted", MatToastType.Success);
                //mufredatDtos.Remove(mufredatDto);
            }
            else
            {
                matToaster.Add("Müfredat Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
        }
    }

}

@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

@inject HttpClient Http
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using UniLife.CommonUI.Pages.Admin.PersonelIslem.PersonelIslemTabs.PersonellerTabs
@using Syncfusion.Blazor.SplitButtons
@inject AppState appState

@attribute [Authorize(Roles = "Administrator,Personel")]



<SfGrid ID="PersGrid" @ref="PersGrid" AllowSorting="true" AllowFiltering="true" AllowPaging="true" DataSource="@PersGridDtos">
    @*OnActionFailure="ActionFailureHandler" DetailDataBound="DetailDataBound" OnActionBegin="ActionBeginHandler" DetailDataBound="DetailDataBound" RowDataBound="RowBound"*@
    <GridEvents TValue="PersonelDto" CommandClicked="CommandClickHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
    <Syncfusion.Blazor.Grids.GridSelectionSettings EnableToggle="false"></Syncfusion.Blazor.Grids.GridSelectionSettings>
    <GridTemplates>
        <DetailTemplate>
            @{
                var personelDto = (context as UniLife.Shared.Dto.Definitions.PersonelDto);
            }
            <div style="padding:20px">
                <SfTab LoadOn="ContentLoad.Demand">
                    <TabEvents Selecting="OnTabSelecting"></TabEvents>
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Detay"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <PersonelBilgi _PersonelDto="personelDto"></PersonelBilgi>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Roller"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <div @onkeydown:stopPropagation="true">
                                    <PersonelRoles _PersonelDto="personelDto"></PersonelRoles>
                                </div>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </DetailTemplate>
    </GridTemplates>
    <GridColumns>
        <GridColumn Visible="false" Field=@nameof(PersonelDto.ApplicationUserId) HeaderText="AppUserId" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
        <GridColumn Field=@nameof(PersonelDto.Ad) HeaderText="Ad"> </GridColumn>
        <GridColumn Field=@nameof(PersonelDto.Soyad) HeaderText="Soyad"></GridColumn>
        <GridColumn Field=@nameof(PersonelDto.TCKN) HeaderText="TCKN"></GridColumn>
        <GridColumn Field=@nameof(PersonelDto.PersNo) HeaderText="Personel No"></GridColumn>
        <GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="Personel Bilgiler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<div class="col-12 text-right">
    <SfProgressButton OnClick="AddNew" Content="Yeni Personel Kaydı >" CssClass="center-block e-primary">
        <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
    </SfProgressButton>
</div>
@code{


    public SfGrid<PersonelDto> PersGrid;
    //PersonelDto target;

    List<PersonelDto> PersGridDtos = new List<PersonelDto>();

    protected override void OnInitialized()
    {
        ReadPersonels();
    }

    void ReadPersonels()
    {
        ApiResponseDto<List<PersonelDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<PersonelDto>>>("api/personel").Result;


        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Personeller getirildi");
            PersGridDtos = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Personel bilgisi getirilirken hata oluştu!");
        }
    }



    public async void ActionCompletedHandler(ActionEventArgs<PersonelDto> args)
    {
        var FilterApplied = PersGrid.FilterSettings.Columns;
    }



    [Parameter]
    public EventCallback<PersonelDto> PersonelToBilgiler { get; set; }

    public void CommandClickHandler(CommandClickEventArgs<PersonelDto> args)
    {
        if (args.CommandColumn.Title == "Personel Bilgiler")
        {
            appState.PersonelState = args.RowData;
            PersonelToBilgiler.InvokeAsync(args.RowData);

        }
    }


    async Task AddNew()
    {
        await PersonelToBilgiler.InvokeAsync(new PersonelDto());
    }
    public void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }

    //public async Task DetailDataBound(DetailDataBoundEventArgs<PersonelDto> args)
    //{
    //    if (target != null)
    //        await OgrGrid.DetailExpandCollapseRow(target);
    //    target = args.Data;
    //}
}



<style type="text/css" class="cssStyles">
    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: medium;
        font-weight: 400;
    }

    .content {
        font-size: medium;
        color: #6c757d
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8;
    }
</style>
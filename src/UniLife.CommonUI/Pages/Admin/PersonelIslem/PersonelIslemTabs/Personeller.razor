@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IMatToaster matToaster
@using Newtonsoft.Json
@using UniLife.Shared.Dto.Definitions
@using UniLife.CommonUI.Pages.Admin.PersonelIslem.PersonelIslemTabs.PersonellerTabs
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection;
@inject AppState appState



<ControlSection>
        <SfGrid ID="OgrGrid" @ref="OgrGrid" AllowSorting="true" AllowFiltering="true" AllowPaging="true" DataSource="@AkaGridDtos">
            @*OnActionFailure="ActionFailureHandler"  OnActionBegin="ActionBeginHandler" DetailDataBound="DetailDataBound" RowDataBound="RowBound"*@
            <GridEvents TValue="PersonelDto" DetailDataBound="DetailDataBound" CommandClicked="CommandClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
            <GridTemplates>
                <DetailTemplate>
                    @{
                        var personelDto = (context as UniLife.Shared.Dto.Definitions.PersonelDto);
                    }
                    <div style="padding:20px">
                        <SfTab LoadOn="ContentLoad.Dynamic">
                            <TabEvents Selecting="OnTabSelecting"></TabEvents>
                            <TabItems>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Details"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <PersonelBilgi _PersonelDto="personelDto"></PersonelBilgi>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Roles"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <PersonelRoles _PersonelDto="personelDto"></PersonelRoles>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Report"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                    </ContentTemplate>
                                </TabItem>
                            </TabItems>
                        </SfTab>
                    </div>
                </DetailTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(PersonelDto.ApplicationUserId) HeaderText="AppUserId" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field=@nameof(PersonelDto.Ad) HeaderText="Ad"> </GridColumn>
                <GridColumn Field=@nameof(PersonelDto.Soyad) HeaderText="Soyad"></GridColumn>
                <GridColumn Field=@nameof(PersonelDto.TCKN) HeaderText="TCKN"></GridColumn>
                <GridColumn Field=@nameof(PersonelDto.PersNo) HeaderText="Personel No"></GridColumn>
                <GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Akademik Bilgiler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
        <div class="col-12 text-right">
            <SfProgressButton OnClick="AddNew" Content="Yeni Personel Kaydı >" CssClass="center-block e-primary">
                <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
            </SfProgressButton>
        </div>


</ControlSection>

@code{


    public SfGrid<PersonelDto> OgrGrid;
    PersonelDto target;

    List<PersonelDto> AkaGridDtos = new List<PersonelDto>();

    public PersonelDto _PersonelDto { get; set; } = new PersonelDto();

    protected override async Task OnInitializedAsync()
    {
        await ReadPersonels();
    }

    async Task ReadPersonels()
    {
        //ApiResponseDto<List<PersonelDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<PersonelDto>>>($"api/Admin/GetPersonelUsers?pageSize={10}&pageNumber={0}");
        ApiResponseDto<List<PersonelDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<PersonelDto>>>("api/personel");


        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Personeller getirildi");
            AkaGridDtos = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Personel bilgisi getirilirken hata oluştu!");
        }
    }



    public async void ActionCompletedHandler(ActionEventArgs<PersonelDto> args)
    {
        var FilterApplied = OgrGrid.FilterSettings.Columns; // to get filtered column details
                                                            //var GroupingApplied = OgrGrid.GroupSettings.Columns; // to get grouped column details
                                                            //var SortingApplied = OgrGrid.SortSettings.Columns; // to get sorted column details
                                                            //var Columns = await OgrGrid.GetColumns(); // to get columsn details like visibility and other properties

    }



    public void ActionBeginHandler(ActionEventArgs<PersonelDto> args)
    {

    }



    [Parameter]
    public EventCallback<PersonelDto> PersonelToBilgiler { get; set; }

    public void CommandClickHandler(CommandClickEventArgs<PersonelDto> args)
    {
        if (args.CommandColumn.Title == "Akademik Bilgiler")
        {
            _PersonelDto = args.RowData;
            appState.PersonelState = _PersonelDto;
            PersonelToBilgiler.InvokeAsync(_PersonelDto);

        }
    }


    async Task AddNew()
    {
        await PersonelToBilgiler.InvokeAsync(new PersonelDto());
    }
    public void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }

    public async Task DetailDataBound(DetailDataBoundEventArgs<PersonelDto> args)
    {
        if (target != null)
            await OgrGrid.DetailExpandCollapseRow(target);
        target = args.Data;
    }
}



<style type="text/css" class="cssStyles">
    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: medium;
        font-weight: 400;
    }

    .content {
        font-size: medium;
        color: #6c757d
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #e83e8c;
    }
</style>
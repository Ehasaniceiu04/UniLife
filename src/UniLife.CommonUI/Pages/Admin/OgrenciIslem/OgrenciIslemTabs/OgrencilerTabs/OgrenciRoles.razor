@using UniLife.Shared.Dto.Definitions
@using UniLife.Shared.Dto.Account
@inject HttpClient Http
@inject IMatToaster matToaster
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Inputs
@inject NavigationManager navigationManager

@attribute [Authorize(Roles = "Administrator")]

<MatChipSet>
    @foreach (var role in roleSelections.OrderBy(x => x.Name))
    {
        <MatChip Label="@role.Name" LeadingIcon="@( (role.IsSelected) ? "done" : "")" @onclick="@(()=>UpdateUserRoleLocal(role))" />
    }
</MatChipSet>
<SfProgressButton OnClick="UpdateUserRolesAsync" Content="Rolleri Kaydet" CssClass="center-block e-primary">
    <ProgressButtonSpinSettings Position="SpinPosition.Center"></ProgressButtonSpinSettings>
</SfProgressButton>

<MatIconButton Icon="rotate_right" OnClick="@(() => OpenResetPasswordDialog(_OgrenciDto.Ad +" "+ _OgrenciDto.Soyad, _OgrenciDto.ApplicationUserId))"></MatIconButton>

<MatIconButton Icon="delete" OnClick="@(OpenDeleteDialog)"></MatIconButton>


<MatDialog @bind-IsOpen="@resetPasswordDialogOpen">
    <MatDialogTitle>Belirtilen kullanıcı için elle şifre değiştiriliyor: @registerParameters.UserName</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@registerParameters" OnValidSubmit="@ResetUserPasswordAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    @*<SfTextBox @bind-Value="@registerParameters.Password" CssClass="e-icons e-input-eye" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" Placeholder="Şifre" Type="InputType.Password"></SfTextBox>*@
                    <MatTextField @bind-Value="@registerParameters.Password" Label="Şifre" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@registerParameters.PasswordConfirm" Label="Şifre onay" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { resetPasswordDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@ResetUserPasswordAsync">Reset User Password</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@deleteUserDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        "@user.UserName" numaralı öğrenci silinecek onaylıyor musunuz?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { deleteUserDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@(() => DeleteUserAsync(_OgrenciDto.Id))">Delete</MatButton>
    </MatDialogActions>
</MatDialog>

@code{

    bool resetPasswordDialogOpen = false;
    bool deleteUserDialogOpen = false;


    [Parameter]
    public OgrenciDto _OgrenciDto { get; set; }

    List<RoleSelection> roleSelections { get; set; } = new List<RoleSelection>();

    public class RoleSelection
    {
        public bool IsSelected { get; set; }
        public string Name { get; set; }
    };


    protected override async Task OnInitializedAsync()
    {
        await GetRolesforOgrenci();
        await PopulateRoleList();

        foreach (var role in roleSelections)
            role.IsSelected = _OgrenciDto.Roles.Contains(role.Name);

        //_OgrenciDto.SaveState();
    }

    public async Task PopulateRoleList()
    {
        try
        {
            var roleNames = new List<string>();
            var response = await Http.GetFromJsonAsync<ApiResponseDto<List<string>>>("api/Account/ListRoles");

            roleNames = response.Result;

            roleSelections = new List<RoleSelection>();// clear out list

            // initialize selection list with all un-selected
            foreach (string role in roleNames)
            {
                roleSelections.Add(new RoleSelection
                {
                    Name = role,
                    IsSelected = false
                });
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Rol bilgileri getirilirken hata oluştu");
        }
    }

    protected void UpdateUserRoleLocal(RoleSelection roleSelectionItem)
    {
        roleSelectionItem.IsSelected = !roleSelectionItem.IsSelected;
    }

    async Task GetRolesforOgrenci()
    {
        ApiResponseDto<List<string>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<string>>>("api/admin/GetRolesByUserId/" + _OgrenciDto.ApplicationUserId);

        if (apiResponse.StatusCode == Status200OK)
        {
            _OgrenciDto.Roles = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Öğrenciye ait role bilgileri getirilemedi!");
        }
    }

    public async Task UpdateUserRolesAsync()
    {
        try
        {
            _OgrenciDto.Roles = roleSelections.Where(x => x.IsSelected == true).Select(x => x.Name).ToList();

            var apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Account/UpdateRoleFromUser", _OgrenciDto);

            if (apiResponse.IsSuccessStatusCode)
                matToaster.Add("Roller Güncellendi", MatToastType.Success);
            else
            {
                matToaster.Add("Hata", MatToastType.Danger, apiResponse.StatusCode.ToString());
                //_OgrenciDto.RestoreState();

            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Roller güncellenemedi");
        }
        finally
        {
            //_OgrenciDto.ClearState();
        }
    }

    public UserInfoDto user { get; set; } = new UserInfoDto(); // Holds user being actively modified or created
    RegisterDto registerParameters { get; set; } = new RegisterDto();
    public void OpenResetPasswordDialog(/*UserInfoDto userInfo,*/ string userName, Guid userId)
    {
        //if (userInfo.UserId == userId)
        //{
        // reusing the registerParameters and User objects
        registerParameters = new RegisterDto();  // reset object
        registerParameters.UserName = userName;
        user.UserId = userId;
        resetPasswordDialogOpen = true;
        //}
        //else
        //{
        //    matToaster.Add("Bu işlemi yapmaya yetkiniz bulunmamaktadır!", MatToastType.Danger, "Dikkat!!!");
        //}
    }

    public async Task ResetUserPasswordAsync()
    {
        try
        {
            if (registerParameters.Password != registerParameters.PasswordConfirm)
            {
                matToaster.Add("Passwords Must Match", MatToastType.Warning);
            }
            else
            {
                var apiResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/Account/AdminUserPasswordReset/{user.UserId}", registerParameters.Password);

                if (apiResponse.IsSuccessStatusCode)
                    matToaster.Add("Password Reset", MatToastType.Success, apiResponse.Message);
                else
                    matToaster.Add(apiResponse.Message, MatToastType.Danger);

                resetPasswordDialogOpen = false;
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Password Reset Error");
        }
    }

    public void OpenDeleteDialog()
    {
        deleteUserDialogOpen = true;
    }

    public async Task DeleteUserAsync(int ogrenciId)
    {
        try
        {
            //var response = await Http.DeleteAsync($"api/Account/{userId}");
            var responseOgrenci = await Http.DeleteAsync($"api/ogrenci/{ogrenciId}");
            //response.IsSuccessStatusCode &&
            if ( responseOgrenci.IsSuccessStatusCode)
            {
                matToaster.Add("User Deleted", MatToastType.Success);
                //users.Remove(user);//ogrenciler grdi refresh
                navigationManager.NavigateTo("admin/ogrenci_islem", true);
                deleteUserDialogOpen = false;
                StateHasChanged();
            }
            else
            {
                matToaster.Add("Öğrenci silerken hata oluştu Admine haber verin!.", MatToastType.Danger, "Hata");
            };


        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "User Delete Error");
        }
    }
}

<style>
    .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>
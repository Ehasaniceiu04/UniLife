@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Buttons
@using UniLife.CommonUI.Extensions
@using UniLife.Shared.Dto.Definitions.Bussines
@inject AppState appState
@inject IMatToaster matToaster
@using System.Net

<Divider5></Divider5>

<ControlSection>
    <div class="server-action-menu" style="padding-top: 10px;">
        <div class="row">
            <div class="col-sm-12 text-center">

                <legend>Açılan Dersler</legend>
            </div>
        </div>
        <div class="row">

            <div class="col-sm-12 col-md-12">
                <SfGrid ID="DersAcilanGrid" @ref="DersAcilanGrid" DataSource="@DersAcilanDtos" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
                    @*<GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>*@
                    <GridEvents TValue="DersAcilanDto" CommandClicked="CommandClickHandler"></GridEvents>
                    <GridColumns>
                        <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                        <GridColumn HeaderText="Kayıt" Width="70">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.None" Title="Kayıt Ol" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowDown", CssClass="e-flat" })"></GridCommandColumn>
                                @*<GridCommandColumn Type="CommandButtonType.None" Title="Seçmeli Al" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-StrokeColor", CssClass="e-flat" })"></GridCommandColumn>*@
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn HeaderText="Seçmeli" TextAlign="TextAlign.Center" Width="120">
                            <Template>
                                @{
                                    var dersacilan = (context as DersAcilanDto);
                                    if (dersacilan.Zorunlu == false)
                                    {
                                        <SfButton IconCss="e-icons e-StrokeColor" OnClick="@(()=>CommandClickSecmeliAl(dersacilan))"></SfButton>
                                    }
                                    @*<SfButton Disabled="@(dersacilan.Zorunlu == true)">Refresh</SfButton>*@
                                }
                            </Template>
                        </GridColumn>

                        <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Kod) HeaderText="Ders Kodu"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Adı"></GridColumn>
                        <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Zorunlu) HeaderText="Z/S" DisplayAsCheckBox="true"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Kredi) HeaderText="Krd"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Akts) HeaderText="Akts"></GridColumn>
                        <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Sinif) HeaderText="Sinif"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.ODTekrar) HeaderText="Önceki Dönemler Tekrar Durumu"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.ADKayit) HeaderText="Aktif Dönem Kayıt Durumu"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="astrodivider"><div class="astrodividermask"></div><span><i>&#10038;</i></span></div>
    </div>
    <div class="server-action-menu">
        <div class="row">
            <div class="col-sm-12 text-center">
                <legend>Kayıt Dersleri</legend>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <SfGrid ID="DersKayitGrid" @ref="DersKayitGrid" DataSource="@DersKayitDtos" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
                    <GridEvents TValue="DersAcilanDto" QueryCellInfo="QueryCellInfoHandler" CommandClicked="CommandClickHandlerKayit"></GridEvents>
                    <GridAggregates>
                        <GridAggregate>
                            <GridAggregateColumns>
                                <GridAggregateColumn Field=@nameof(DersAcilanDto.Akts) Type="AggregateType.Sum" Format="N2">
                                    <FooterTemplate>
                                        @{
                                            var aggregate = (context as AggregateTemplateContext);
                                            <div>
                                                <p>Toplam: @aggregate.Sum</p>
                                            </div>
                                        }
                                    </FooterTemplate>
                                </GridAggregateColumn>
                                <GridAggregateColumn Field=@nameof(DersAcilanDto.Kredi) Type="AggregateType.Sum" Format="N2">
                                    <FooterTemplate>
                                        @{
                                            var aggregate = (context as AggregateTemplateContext);
                                            <div>
                                                <p>Toplam: @aggregate.Sum</p>
                                            </div>
                                        }
                                    </FooterTemplate>
                                </GridAggregateColumn>
                            </GridAggregateColumns>
                        </GridAggregate>
                    </GridAggregates>

                    <GridColumns>
                        <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                        <GridColumn Width="50">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.None" Title="Kayıt Kaldır" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowUP", CssClass="e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Kod) HeaderText="Ders Kodu"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Adı"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.YerineSecilenAd) HeaderText="Yerine Ders"></GridColumn>
                        <GridColumn Visible="false" Field=@nameof(DersAcilanDto.YerineSecilenId) HeaderText="Yerine id"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Zorunlu) DisplayAsCheckBox="true" HeaderText="Z/S"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Kredi) Format="N2" HeaderText="Krd"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Akts) Format="N2" HeaderText="Akts"></GridColumn>
                        <GridColumn Field=@nameof(DersAcilanDto.Sinif) HeaderText="Sinif"></GridColumn>

                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-6 text-right">
            <SfProgressButton Content="Eklenen Derslere Kayıt Ol" OnClick="KayıtOl" CssClass="center-block e-primary">
                <ProgressButtonSpinSettings Position="SpinPosition.Center"></ProgressButtonSpinSettings>
            </SfProgressButton>
        </div>
    </div>
</ControlSection>


<Dialog Baslik="Ders mevcut" @bind-isDialogOpen="@dialog">
    <p>@dialogText</p>
</Dialog>


<Dialog Baslik="Seçmeli Dersler" @bind-isDialogOpen="@secmeliDersDialogOpen">
    <div class="row">
        <SfGrid ID="SecmeliDersGrid" @ref="SecmeliDersGrid" DataSource="@SecmeliDerslerDtos" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowFiltering="true">
            @*<GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>*@
            <GridEvents TValue="DersAcilanDto" CommandClicked="CommandClickHandlerSecmeli"></GridEvents>
            @*<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>*@
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Width="50">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Kayıt Ol Secmeli" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowDown", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
                <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Kod) HeaderText="Kod"></GridColumn>
                <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Adı"></GridColumn>
                <GridColumn Field=@nameof(DersAcilanDto.FakulteAd) HeaderText="Fakulte Ad"></GridColumn>
                <GridColumn Field=@nameof(DersAcilanDto.ProgramAd) HeaderText="Program Ad"></GridColumn>
                <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Zorunlu) DisplayAsCheckBox="true" HeaderText="Z/S"></GridColumn>
                <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Kredi) HeaderText="Krd"></GridColumn>
                <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Akts) HeaderText="Akts"></GridColumn>
                <GridColumn AutoFit="true" Field=@nameof(DersAcilanDto.Sinif) HeaderText="Sinif"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

</Dialog>

@code{
    private Dictionary<string, object> primButton = new Dictionary<string, object>() { { "title", "Ders Seç" } };


    bool secmeliDersDialogOpen;
    List<DersAcilanDto> SecmeliDerslerDtos = new List<DersAcilanDto>();
    SfGrid<DersAcilanDto> SecmeliDersGrid;
    public void QueryCellInfoHandler(QueryCellInfoEventArgs<DersAcilanDto> args)
    {
        if (!string.IsNullOrWhiteSpace(args.Data.YerineSecilenAd))
        {
            args.Cell.AddClass(new string[] { "below-35" });
        }
    }



    SfGrid<DersAcilanDto> DersAcilanGrid;
    SfGrid<DersAcilanDto> DersKayitGrid;

    [Parameter]
    public int Sinif { get; set; }


    //[Parameter]
    //public int DonemTipId { get; set; }

    //[Parameter]
    public List<DersAcilanDto> DersAcilanDtos { get; set; } = new List<DersAcilanDto>();

    //[Parameter]
    public List<DersAcilanDto> DersKayitDtos { get; set; }// = new List<DersAcilanDto>();

    bool dialog;
    string dialogText = "";




    protected override void OnInitialized()
    {
        ReadAcilan();
        ReadKayitli();

    }


    void ReadKayitli()
    {
        ApiResponseDto<List<DersAcilanDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<DersAcilanDto>>>($"api/dersAcilan/GetKayitliDerssByOgrenciId/{appState.OgrenciState.Id}/{Sinif}/{appState.DersKayitDonemIdState}").Result;
        DersKayitDtos = apiResponse.Result;
    }

    void ReadAcilan()
    {
        ApiResponseDto<List<DersAcilanDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<DersAcilanDto>>>($"api/dersacilan/GetAcilanDersByMufredatId/{appState.OgrenciState.MufredatId}/{Sinif}/{appState.DersKayitDonemIdState}").Result;
        DersAcilanDtos = apiResponse.Result;
    }


    public void CommandClickHandler(CommandClickEventArgs<DersAcilanDto> args)
    {
        // oka bastıkmı varsa zaten uyarı veriyoruz onu vermeye devam edecek
        // eğer atma başrılı olursa üsttegi giridn satırı boyayacaz
        // ilk açılıştada alttaki gidin idlerini üsttekilerde aratacaz varsa boyayacaz



        if (args.CommandColumn.Title == "Kayıt Ol")
        {
            if (DersKayitDtos.Any(x => x.Id == args.RowData.Id))
            {
                dialog = true;
                dialogText = $"{args.RowData.Kod} kodlu, {args.RowData.Ad} isimli ders zaten ekli!";
            }
            else
            {
                DersKayitDtos.Add(args.RowData);
                DersKayitGrid.Refresh();
            }
        }

        if (args.CommandColumn.Title == "Seçmeli Al")
        {
            if (DersKayitDtos.Any(x => x.Id == args.RowData.Id))
            {
                dialog = true;
                dialogText = $"{args.RowData.Kod} kodlu, {args.RowData.Ad} isimli ders yerine seçim zaten yapılmış!";
            }
            else
            {
                secmeliDersDialogOpen = true;
                //Modal içinde girden seçmeli ders seçtiriyoruz.
                //ApiResponseDto<List<DersAcilanDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<DersAcilanDto>>>($"api/dersAcilan/ByZorunlu/{false}").Result;

                OData<DersAcilanDto> apiResponse = Http.GetFromJsonAsync<OData<DersAcilanDto>>($"odata/dersAcilans?$filter=Zorunlu eq false and Sinif eq '{args.RowData.Sinif}'").Result;

                SecmeliDerslerDtos = apiResponse.Value;
                foreach (var item in SecmeliDerslerDtos)
                {
                    item.YerineSecilenAd = args.RowData.Ad;
                    item.YerineSecilenId = args.RowData.Id;
                }
            }
        }
        //DersKayitGrid.Refresh();

    }


    public async Task CommandClickSecmeliAl(DersAcilanDto args)
    {
        if (DersKayitDtos.Any(x => x.Id == args.Id))
        {
            dialog = true;
            dialogText = $"{args.Kod} kodlu, {args.Ad} isimli ders yerine seçim zaten yapılmış!";
        }
        else
        {
            try
            {
                secmeliDersDialogOpen = true;
                //Modal içinde girden seçmeli ders seçtiriyoruz.
                //ApiResponseDto<List<DersAcilanDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<DersAcilanDto>>>($"api/dersAcilan/ByZorunlu/{false}");
                OData<DersAcilanDto> apiResponse = await Http.GetFromJsonAsync<OData<DersAcilanDto>>($"odata/dersAcilans?$filter=Zorunlu eq false and SecmeliKodu eq '{args.SecmeliKodu}' and Sinif eq {args.Sinif}");

                if (apiResponse.Value.Count() > 0)
                {
                    SecmeliDerslerDtos = apiResponse.Value;
                    foreach (var item in SecmeliDerslerDtos)
                    {
                        item.YerineSecilenAd = args.Ad;
                        item.YerineSecilenId = args.Id;
                    }
                }
                else
                    matToaster.Add("", MatToastType.Danger, "İşlem başarısız!");
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
            }




            //secmeliDersDialogOpen = true;
            ////Modal içinde girden seçmeli ders seçtiriyoruz.
            ////ApiResponseDto<List<DersAcilanDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<DersAcilanDto>>>($"api/dersAcilan/ByZorunlu/{false}");
            //OData<DersAcilanDto> apiResponse = await Http.GetFromJsonAsync<OData<DersAcilanDto>>($"odata/dersAcilans?$filter=Zorunlu eq false and SecmeliKodu eq '{args.SecmeliKodu}'");
            //SecmeliDerslerDtos = apiResponse.Value;
            //foreach (var item in SecmeliDerslerDtos)
            //{
            //    item.YerineSecilenAd = args.Ad;
            //    item.YerineSecilenId = args.Id;
            //}
        }

    }

    public async Task CommandClickHandlerSecmeli(CommandClickEventArgs<DersAcilanDto> args)
    {
        secmeliDersDialogOpen = false;
        if (args.CommandColumn.Title == "Kayıt Ol Secmeli")
        {
            DersKayitDtos.Add(args.RowData);
            DersKayitGrid.Refresh();
        }
    }



    public async Task CommandClickHandlerKayit(CommandClickEventArgs<DersAcilanDto> args)
    {
        if (args.CommandColumn.Title == "Kayıt Kaldır")
        {
            try
            {
                var response = await Http.DeleteAsync($"api/DersKayit/DeleteByOgrId_DersId/{appState.OgrenciState.Id}/{args.RowData.Id}");


                if (response.StatusCode == (HttpStatusCode)Status200OK)
                {
                    matToaster.Add("Ders kayıdı kaldırıldı", MatToastType.Success);
                    DersKayitDtos.RemoveAll(x => x.Id == args.RowData.Id);
                    DersKayitGrid.Refresh();
                    StateHasChanged();
                    matToaster.Add("İşlem başarılı.", MatToastType.Success);
                }
                else
                    matToaster.Add("İşlem başarısız!", MatToastType.Danger);
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
            }
        }
    }



    async Task KayıtOl()
    {

        try
        {
            List<DersKayitDto> ogrenciDersKayitDtos = new List<DersKayitDto>();
            foreach (var item in DersKayitDtos)
            {
                ogrenciDersKayitDtos.Add(new DersKayitDto { DersAcilanId = item.Id, OgrenciId = appState.OgrenciState.Id, DersYerineSecilenId = item.YerineSecilenId ?? item.Id, DersYerineSecilenAd = item.YerineSecilenAd });
            }

            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/DersKayit/OgrenciKayitToDerss", ogrenciDersKayitDtos);


            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
                DersKayitGrid.Refresh();
                StateHasChanged();
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "İşlem başarısız!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }






    }



}

<style>
    .server-action-menu {
        background-color: transparent;
        background-image: linear-gradient(to bottom, rgba(30, 87, 153, 0.2) 0%, rgba(125, 185, 232, 0) 100%);
        background-repeat: repeat;
        border-radius: 10px;
        padding: 5px;
    }

    .e-DoubleArrowDown:before {
        content: '\e7bf';
        color: #e83e8c;
    }

    .e-DoubleArrowUP:before {
        content: '\e7c5';
        color: #e83e8c;
    }

    .e-StrokeColor:before {
        content: '\e704';
        color: #3210c9;
    }

    .e-grid .e-gridcontent .e-rowcell.below-35 {
        color: orangered;
    }

    .mdc-dialog .mdc-dialog__container {
        width: 100%;
    }

    .mdc-dialog .mdc-dialog__surface {
        max-width: none;
        width: 70%;
    }
</style>
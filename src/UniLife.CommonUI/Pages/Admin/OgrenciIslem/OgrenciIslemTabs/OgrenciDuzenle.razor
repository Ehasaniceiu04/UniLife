@*@page "/ogrenci/duzenle"*@

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject HttpClient Http;
@using Syncfusion.Blazor.SplitButtons
@inject AuthenticationStateProvider authStateProvider
@using Syncfusion.Blazor.Calendars
@using System.IO;
@inject AppState appState
@inject IJSRuntime JSRuntime;
@using System.ComponentModel.DataAnnotations;

@attribute [Authorize(Roles = "Administrator,Personel")]

@if (!isInitializingFinised)
{

    <LoadingBackground ShowLogoBox="true">
        <label>Bilgiler Yükleniyor...</label>
    </LoadingBackground>
}
else
{
    <div class="card">
        <div class="row info-panel">
            <div class="col-sm-12 col-md-12">
                @*Model=@_OgrenciDto OnValidSubmit="Kaydet"*@
                @*EditContext="@EC"*@
                <EditForm EditContext="@EC">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-sm-12 col-md-6">
                            <div class="server-action-menu">
                                <div class="form-row form-group form-inline ">
                                    <label class="col-sm-2" for="OgrNo">Öğrenci NO:</label>
                                    <SfNumericTextBox @bind-Value="@_OgrenciDto.OgrNo" Enabled="false" ID="OgrNo" CssClass="col-sm-4"></SfNumericTextBox>
                                    <label class="col-sm-2" for="durum">Durum:</label>
                                    <SfCheckBox ID="durum" CssClass="col-sm-4" @bind-Checked="@_OgrenciDto.Durum"></SfCheckBox>
                                    <label class="col-sm-2" for="TCKN">TCKN:</label>
                                    <SfTextBox @bind-Value="@_OgrenciDto.TCKN" ID="TCKN" CssClass="col-sm-4"></SfTextBox>
                                    <label class="col-sm-2" for="Seri">Kimlik Seri:</label>
                                    <SfTextBox ID="Seri" CssClass="col-sm-4"></SfTextBox>
                                    <label class="col-sm-2" for="Adi">Adı:</label>
                                    <SfTextBox @bind-Value="@_OgrenciDto.Ad" ID="Adı" CssClass="col-sm-4"></SfTextBox>
                                    <label class="col-sm-2" for="Soyadi">Soyadı:</label>
                                    <SfTextBox @bind-Value="@_OgrenciDto.Soyad" ID="Soyadi" CssClass="col-sm-4"></SfTextBox>
                                    <label class="col-sm-2" for="Email">Email:</label>
                                    <SfTextBox @bind-Value="@_OgrenciDto.Email" ID="Email" CssClass="col-sm-10"></SfTextBox>
                                    <label class="col-sm-2" for="DropFakulte">Fakulte:</label>
                                    <SfDropDownList ID="DropFakulte" @ref="DropFakulte" TItem="FakulteDto" CssClass="col-sm-10 pb-1"
                                                    TValue="int?" PopupHeight="230px" Placeholder="Fakülte Seçiniz"
                                                    @bind-Value="@_OgrenciDto.FakulteId" DataSource="@fakulteDtos">
                                        <DropDownListEvents TValue="int?" ValueChange="FakulteToBolum"></DropDownListEvents>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="DropBolum">Bolum:</label>
                                    <SfDropDownList ID="DropBolum" @ref="DropBolum" TItem="BolumDto" CssClass="col-sm-10 pb-1"
                                                    TValue="int?" PopupHeight="230px" Placeholder="Bölüm Seçiniz"
                                                    @bind-Value="@_OgrenciDto.BolumId" DataSource="@bolumDtos">
                                        <DropDownListEvents TValue="int?" ValueChange="BolumToProgram"></DropDownListEvents>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="DropProgram">Program:</label>
                                    <SfDropDownList ID="DropProgram" @ref="DropProgram" TItem="ProgramDto" CssClass="col-sm-10 pb-1"
                                                    TValue="int?" PopupHeight="230px" Placeholder="Program Seçiniz"
                                                    @bind-Value="@_OgrenciDto.ProgramId" DataSource="@programDtos">
                                        <DropDownListEvents TValue="int?" ValueChange="ProgramToMufredat"></DropDownListEvents>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="DropMufredat">Mufredat:</label>
                                    <SfDropDownList ID="DropMufredat" @ref="DropMufredat" TItem="MufredatDto" CssClass="col-sm-10 pb-1"
                                                    TValue="int?" PopupHeight="230px" Placeholder="Müfredat Seçiniz"
                                                    @bind-Value="@_OgrenciDto.MufredatId" DataSource="@mufredatDtos">
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="DropSinif">Sınıf:</label>
                                    <SfDropDownList ID="DropSinif" @ref="DropSinif" TItem="SinifDto" CssClass="col-sm-10 pb-1"
                                                    TValue="int?" PopupHeight="230px" Placeholder="Sınıf Seçiniz"
                                                    @bind-Value="@_OgrenciDto.Sinif" DataSource="@sinifDtos">
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="ilDonem">ilave Dönem:</label>
                                    <SfTextBox ID="ilDonem" @bind-Value="@_OgrenciDto.IlaveDonem" Placeholder="ilave Dönem" CssClass="col-sm-3"></SfTextBox>

                                </div>

                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <div class="server-action-menu">
                                <div class="form-row form-group form-inline ">
                                    <label class="col-sm-2" for="DropKayitNeden">Kayıt Neden:</label>
                                    <SfDropDownList ID="DropKayitNeden" @ref="DropKayitNeden" TItem="KayitNedenDto" CssClass="col-sm-4 pb-1"
                                                    TValue="int?" PopupHeight="230px" PopupWidth="500px"
                                                    @bind-Value="@_OgrenciDto.KayitNedenId" DataSource="@kayitNedenDtos">
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="KayTarih">Kayıt Tarihi:</label>
                                    <SfDatePicker ID="KayTarih" TValue="DateTime?" @bind-Value="@_OgrenciDto.KayitTarih" CssClass="col-sm-4 pb-1"></SfDatePicker>
                                    <label class="col-sm-2" for="ogrDurum">Öğrenim Durum:</label>
                                    <SfDropDownList ID="DropOgrenimDurum" @ref="DropOgrenimDurum" TItem="OgrenimDurumDto" CssClass="col-sm-4 pb-1"
                                                    TValue="int?" PopupHeight="230px" PopupWidth="500px"
                                                    @bind-Value="@_OgrenciDto.OgrenimDurumId" DataSource="@ogrenimDurumDtos">
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-2" for="AyrTarih">Ayrılma Tarihi:</label>
                                    <SfDatePicker ID="AyrTarih" TValue="DateTime?" @bind-Value="@_OgrenciDto.AyrilTarih" CssClass="col-sm-4 pb-1"></SfDatePicker>

                                    <label class="col-sm-2" for="danis">Danışmanı:</label>

                                    <SfButton ID="danis" IconCss="e-icons e-Resource" EnableRtl="true" OnClick="AkademisyenAta" CssClass="e-flat col-sm-4" IsPrimary="true">@(string.IsNullOrWhiteSpace(danismanAd) ?"Ekle": danismanAd)</SfButton>
                                    <label class="col-sm-2" for="CapYan">Çap Yandal Durum:</label>
                                    <SfDropDownList ID="CapYan" TItem="KeyValueDto" CssClass="col-sm-4 pb-1"
                                                    TValue="int?" PopupHeight="230px"
                                                    @bind-Value="@_OgrenciDto.CapYan" DataSource="@Sabitler.CapYandal">
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-4">İkinci üniversite var mı?</label>
                                    <SfCheckBox CssClass="col-sm-2" @bind-Checked="@_OgrenciDto.MultiUni"></SfCheckBox>
                                </div>
                                <div class="form-row">
                                    <SfTextBox Placeholder="Bilgi Notu" @bind-Value="@_OgrenciDto.BilgNotu" CssClass="col-sm-6" Readonly="false" FloatLabelType="@FloatLabelType.Auto" Multiline="true"></SfTextBox>
                                </div>

                            </div>
                        </div>
                    </div>

                </EditForm>
                <div class="row">
                    <div class="col-6 text-left">

                    </div>
                    <div class="col-6 text-right">
                        @*OnClick="SubmitHandler"*@
                        <SfProgressButton OnClick="SubmitHandler" Content="Kaydet" CssClass="center-block e-success">
                            <ProgressButtonSpinSettings Position="SpinPosition.Center"></ProgressButtonSpinSettings>
                        </SfProgressButton>
                    </div>
                </div>
               





            </div>
        </div>
    </div>
}



@if (akaDialogOpen)
{
    <AkademisyenSec CommandClickHandlerAkademisyen="AkaSecildi" @bind-isAkademisyenDialogOpen="@akaDialogOpen"></AkademisyenSec>
}



@code {

    string danismanAd;
    bool akaDialogOpen;
    async Task AkaSecildi(AkademisyenDto akademisyenDto)
    {
        danismanAd = akademisyenDto.Ad + " " + akademisyenDto.Soyad;
        _OgrenciDto.DanismanId = akademisyenDto.Id;
    }


    private EditContext EC { get; set; }
    private async Task SubmitHandler()
    {
        // manually trigger the validation here
        if (EC.Validate())
        {
            await Kaydet();
        }
    }


    [Parameter]
    public OgrenciDto _OgrenciDto { get; set; }// = new OgrenciDto();


    SfDropDownList<int?, FakulteDto> DropFakulte;
    SfDropDownList<int?, BolumDto> DropBolum;
    SfDropDownList<int?, ProgramDto> DropProgram;
    SfDropDownList<int?, MufredatDto> DropMufredat;
    SfDropDownList<int?, SinifDto> DropSinif;
    SfDropDownList<int?, KayitNedenDto> DropKayitNeden;
    SfDropDownList<int?, OgrenimDurumDto> DropOgrenimDurum;
    SfDropDownList<int?, OgrenimTurDto> DropOgrenimTur;




    public bool ShowSelectAllCheckBox { get; set; } = false;
    public bool EnableSelectionOrders { get; set; } = false;
    public bool EnableDropDownIcon { get; set; } = true;

    List<FakulteDto> fakulteDtos = new List<FakulteDto>();
    List<BolumDto> bolumDtos = new List<BolumDto>();
    List<ProgramDto> programDtos = new List<ProgramDto>();
    List<MufredatDto> mufredatDtos = new List<MufredatDto>();
    List<KayitNedenDto> kayitNedenDtos = new List<KayitNedenDto>();
    List<OgrenimDurumDto> ogrenimDurumDtos = new List<OgrenimDurumDto>();
    List<OgrenimTurDto> ogrenimTurDtos = new List<OgrenimTurDto>();

    List<SinifDto> sinifDtos = new List<SinifDto>
{
            new SinifDto() { Ad = "0", Id = 0 },
            new SinifDto() { Ad = "1", Id = 1 },
            new SinifDto() { Ad = "2", Id = 2 },
            new SinifDto() { Ad = "3", Id = 3 },
            new SinifDto() { Ad = "4", Id = 4 },
            new SinifDto() { Ad = "5", Id = 5 },
            new SinifDto() { Ad = "6", Id = 6 },
            new SinifDto() { Ad = "7", Id = 7 },
            new SinifDto() { Ad = "8", Id = 8 },
            new SinifDto() { Ad = "9", Id = 9 },
};




    bool isInitializingFinised;

    protected override Task OnParametersSetAsync()
    {
        _OgrenciDto = appState.OgrenciState ?? new OgrenciDto();
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _OgrenciDto = appState.OgrenciState ?? new OgrenciDto();
        EC = new EditContext(_OgrenciDto);
        danismanAd = "";


        await ReadFakultes();
        await ReadKayitNedens();
        await ReadOgrenimDurums();
        await ReadOgrenimTurs();
        if (_OgrenciDto.Id != 0)
        {
            await ReadBolums(_OgrenciDto.FakulteId);
            await ReadPrograms(_OgrenciDto.BolumId);
            await ReadMufredats(_OgrenciDto.ProgramId);
        }
        if (_OgrenciDto.DanismanId.HasValue)
        {
            await ReadAkademisyens(_OgrenciDto.DanismanId);
        }
        isInitializingFinised = true;
    }

    async Task ReadFakultes()
    {
        ApiResponseDto<List<FakulteDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<FakulteDto>>>("api/fakulte");

        if (apiResponse.StatusCode == Status200OK)
        {
            fakulteDtos = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "fakulte getirilirken hata oluştu!");
        }
    }



    private void FakulteToBolum(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        bolumDtos = new List<BolumDto>();
        programDtos = new List<ProgramDto>();
        mufredatDtos = new List<MufredatDto>();
        _OgrenciDto.BolumId = null;
        _OgrenciDto.ProgramId = null;
        _OgrenciDto.MufredatId = null;
        if (_OgrenciDto.Id == 0)
        {
            ReadBolums(args.Value).ConfigureAwait(true);
        }
        else
        {
            ReadBolums(_OgrenciDto.FakulteId).ConfigureAwait(true);
        }
        StateHasChanged();


    }



    async Task ReadBolums(int? fakulteId)
    {
        ApiResponseDto<List<BolumDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<BolumDto>>>("api/bolum/GetBolumByFakulteIds/" + string.Join(',', fakulteId));

        if (apiResponse.StatusCode == Status200OK)
        {
            bolumDtos = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm getirilirken hata oluştu!");
        }
    }

    private void BolumToProgram(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        programDtos = new List<ProgramDto>();
        mufredatDtos = new List<MufredatDto>();
        _OgrenciDto.ProgramId = null;
        _OgrenciDto.MufredatId = null;
        if (_OgrenciDto.Id == 0)
        {

            ReadPrograms(args.Value).ConfigureAwait(true);
        }
        else
        {
            ReadPrograms(_OgrenciDto.BolumId).ConfigureAwait(true);
        }
    }

    async Task ReadPrograms(int? bolumId)
    {
        ApiResponseDto<List<ProgramDto>> apiResponse;
        if (bolumId == null)
        {
            return;
        }
        else
        {
            apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<ProgramDto>>>("api/program/GetProgramByBolumIds/" + string.Join(',', bolumId));
        }


        if (apiResponse.StatusCode == Status200OK)
        {
            programDtos = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "program getirilirken hata oluştu!");
        }
    }

    private void ProgramToMufredat(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        mufredatDtos = new List<MufredatDto>();
        _OgrenciDto.MufredatId = null;
        if (_OgrenciDto.Id == 0)
        {

            ReadMufredats(args.Value).ConfigureAwait(true);
        }
        else
        {
            ReadMufredats(_OgrenciDto.ProgramId).ConfigureAwait(true);
        }
    }

    async Task ReadMufredats(int? programId)
    {
        ApiResponseDto<List<MufredatDto>> apiResponse;
        if (programId == null)
        {
            return;
        }
        else
        {
            apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<MufredatDto>>>("api/mufredat/GetMufredatByProgramIds/" + string.Join(',', programId));
        }


        if (apiResponse.StatusCode == Status200OK)
        {
            mufredatDtos = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "mufredat getirilirken hata oluştu!");
        }
    }

    async Task ReadAkademisyens(int? DanismanId)
    {

        try
        {
            OData<AkademisyenDto> apiResponse = await Http.GetFromJsonAsync<OData<AkademisyenDto>>($"odata/akademisyens?$select=Id,Ad,Soyad&$filter=Id eq {_OgrenciDto.DanismanId}");

            if (apiResponse.Value.Count != 0)
            {
                var akaDanisman = apiResponse.Value.FirstOrDefault();
                danismanAd = akaDanisman.Ad + " " + akaDanisman.Soyad;
            }
            else
                matToaster.Add("Danisman bilgisi getirilemedi", MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }
    }



    [Parameter]
    public EventCallback<int> AkademikToOgrenci { get; set; }

    async Task GoBackOgrenci()
    {
        await AkademikToOgrenci.InvokeAsync(0);
    }

    async Task Kaydet()
    {
        try
        {
            if (_OgrenciDto.Id == 0)
            {
                var apiResponse = await ((IdentityAuthenticationStateProvider)authStateProvider).Create(_OgrenciDto);
                if (apiResponse.IsSuccessStatusCode)
                {

                    _OgrenciDto.OgrNo = Newtonsoft.Json.JsonConvert.DeserializeObject<OgrenciDto>(apiResponse.Result.ToString()).OgrNo;
                    _OgrenciDto.ApplicationUserId = Newtonsoft.Json.JsonConvert.DeserializeObject<OgrenciDto>(apiResponse.Result.ToString()).ApplicationUserId;
                    _OgrenciDto.Id = Newtonsoft.Json.JsonConvert.DeserializeObject<OgrenciDto>(apiResponse.Result.ToString()).Id;
                    matToaster.Add(apiResponse.Message, MatToastType.Success);

                    //await GoBackOgrenci();


                    appState.OgrenciState = _OgrenciDto;
                }
                else
                {
                    matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Öğrenci kullanıcısı oluşturulurken hata oluştu");
                }
            }
            else
            {
                _OgrenciDto.Bolum = null;
                _OgrenciDto.Fakulte = null;
                _OgrenciDto.Program = null;
                ApiResponseDto apiResponse = await ((IdentityAuthenticationStateProvider)authStateProvider).UpdateOgrenciUser(_OgrenciDto);

                if (apiResponse.StatusCode == Status200OK)
                {
                    matToaster.Add("Öğrenci bilgileri güncellendi", MatToastType.Success);
                }
                else
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Güncelleme başarısız oldu!");
                }
            }

        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Öğrenci ile ilgili değişiklikler kayıt edilirken hata oluştu");
        }

    }



    async Task ReadKayitNedens()
    {
        ApiResponseDto<List<KayitNedenDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<KayitNedenDto>>>("api/KeyValues/GetKayitNeden");

        if (apiResponse.StatusCode == Status200OK)
        {
            kayitNedenDtos = apiResponse.Result;

        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Kayit neden getirilirken hata oluştu!");
        }
    }
    async Task ReadOgrenimDurums()
    {
        ApiResponseDto<List<OgrenimDurumDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenimDurumDto>>>("api/ogrenimdurum");

        if (apiResponse.StatusCode == Status200OK)
        {
            ogrenimDurumDtos = apiResponse.Result.OrderBy(x=>x.Ad).ToList();

        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Kayit neden getirilirken hata oluştu!");
        }
    }
    async Task ReadOgrenimTurs()
    {
        ApiResponseDto<List<OgrenimTurDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenimTurDto>>>("api/ogrenimtur");

        if (apiResponse.StatusCode == Status200OK)
        {
            ogrenimTurDtos = apiResponse.Result.OrderBy(x => x.Ad).ToList();

        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Öğrenim türü getirilirken hata oluştu!");
        }
    }

    SfTextBox date;
    public void onCreateDate()
    {
        this.date.AddIcon("append", "e-date-icon");
    }


    public void AkademisyenAta()
    {
        akaDialogOpen = true;
    }
}

<style>


    textarea.e-input,
    .e-float-input textarea,
    .e-float-input.e-control-wrapper textarea,
    .e-input-group textarea,
    .e-input-group.e-control-wrapper textarea {
        resize: none;
    }

    .server-action-menu {
        background-color: transparent;
        background-image: linear-gradient(to bottom, rgba(30, 87, 153, 0.2) 0%, rgba(125, 185, 232, 0) 100%);
        background-repeat: repeat;
        border-radius: 10px;
        padding: 7px;
    }


    /*Autocomplate start*/
    /*.content {
        max-width: 270px;
        margin: 25px 300px;
        padding-top: 55px;
    }

    .header {
        font-weight: 600;
        color: rgba(0, 0, 0, .54);
        height: 48px;
        padding: 15px 0 0 16px;
        font-size: 16px;
        background-color: #f5f5f5;
        font-family: "Segoe UI", "GeezaPro", "DejaVu Serif";
    }

    .fabric .header {
        background-color: #fff;
        border-bottom: 1px solid #ccc;
        color: #0078d7;
        font-weight: 400;
    }

    .bootstrap .header {
        background-color: #fff;
        border-bottom: 1px solid #ccc;
        color: #777;
        font-family: "Helvetica Neue", "Helvetica", "Arial", "sans-serif";
        font-weight: 400;
        font-size: 12px;
        line-height: 30px;
        height: 30px;
        padding: 0 0 0 24px;
    }

    .e-bigger.bootstrap .header {
        line-height: 44px;
        height: 44px;
        font-size: 13px;
    }

    .highcontrast .header {
        color: #fff;
        background-color: #000;
    }

    .bootstrap4 .header {
        color: #6c757d;
    }

    .bootstrap .info,
    .e-bigger.bootstrap .info {
        margin-left: 25px;
    }

    .bootstrap .job {
        opacity: .54;
        font-size: 14px;
        margin-top: -25px;
        margin-bottom: 20px;
    }

    .e-bigger.bootstrap .job {
        font-size: 15px;
        margin-top: -32px;
        margin-bottom: 17px;
    }

    .bootstrap .ename {
        font-size: 15px;
        margin-top: 20px;
        opacity: .87;
        padding: 3px 0 20px;
    }

    .e-bigger.bootstrap .ename {
        font-size: 16px;
        padding-bottom: 15px;
    }

    .bootstrap .empImage,
    .e-bigger.bootstrap .empImage {
        margin: 0px 10px 0 20px;
    }

    .bootstrap .value {
        margin-top: 3px;
        margin-left: 3px;
    }

    .e-bigger.bootstrap .value {
        margin-top: 5px;
        margin-left: 5px;
    }

    .bootstrap .name {
        padding: 9px 42px;
    }

    .e-bigger.bootstrap .name {
        padding: 12px 42px;
    }

    .info {
        margin-left: 34px;
    }

    .ename {
        display: block !important;
        opacity: .87;
        font-size: 16px;
        margin-top: 8px;
    }

    .name {
        padding: 5px 42px;
        opacity: .87;
        line-height: 1.063em;
    }

    .job {
        opacity: .54;
        font-size: 14px;
        margin-top: -15px;
        margin-bottom: 7px;
    }

    .empImage {
        margin: 6px 16px;
        float: left;
        width: 50px;
        height: 50px;
    }

    .value {
        border-radius: 50%;
        float: left;
        margin-top: 2px;
        margin-left: 2px;
    }

    .e-bigger:not(.bootstrap) .value {
        margin-top: 7px;
    }

    .e-bigger:not(.bootstrap) .name {
        padding: 11px 42px;
    }

    .template.e-popup .e-list-item * {
        display: block;
        text-indent: 0;
    }

    .e-bigger:not(.bootstrap) .template .e-dropdownbase .e-list-item {
        line-height: 42px;
        height: 80px;
    }

    .e-bigger:not(.bootstrap) .template.e-popup .empImage {
        margin: 10px 16px;
    }

    .bootstrap4 .template.e-popup .empImage {
        margin: 0px 16px;
    }

    .bootstrap4 .template.e-popup .job {
        margin-top: 0;
    }

    .e-bigger.bootstrap4 .template.e-popup .job {
        margin-top: -15px;
    }

    .template .e-dropdownbase.e-content {
        max-height: 200px !important;
    }*/
    /*Autocomplate end*/

    .e-input-calendar::before {
        content: '\e901';
        font-family: e-icons;
        font-size: 13px;
    }



    @@media (min-width: 576px) {
        .form-inline label {
            justify-content: unset;
        }
    }
</style>

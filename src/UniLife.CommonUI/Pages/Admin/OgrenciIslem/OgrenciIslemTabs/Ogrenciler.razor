@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using UniLife.CommonUI.Pages.Admin.OgrenciIslem.OgrenciIslemTabs.OgrencilerTabs
@using Syncfusion.Blazor.SplitButtons
@inject AppState appState


<SfGrid ID="OgrGrid" @ref="OgrGrid" AllowSorting="true" AllowFiltering="true" AllowPaging="true" DataSource="@OgrGridDtos">
    @*OnActionFailure="ActionFailureHandler" DetailDataBound="DetailDataBound"  OnActionBegin="ActionBeginHandler" DetailDataBound="DetailDataBound" RowDataBound="RowBound"*@
    <GridEvents TValue="OgrenciDto" CommandClicked="CommandClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
    <GridTemplates>
        <DetailTemplate>
            @{
                var ogrenciInfo = (context as OgrenciDto);

            }
            <div style="padding:20px">

                <SfTab LoadOn="ContentLoad.Demand">
                    <TabEvents Selecting="OnTabSelecting"></TabEvents>
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Details"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <OgrenciBilgi ogrenciId="ogrenciInfo.Id"></OgrenciBilgi>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Roles"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <OgrenciRoles _OgrenciDto="ogrenciInfo"></OgrenciRoles>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </DetailTemplate>
    </GridTemplates>
    <GridColumns>
        <GridColumn Visible="false" Field=@nameof(OgrenciDto.ApplicationUserId) AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.Ad) HeaderText="Ad"> </GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.Soyad) HeaderText="Soyad"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.TCKN) HeaderText="TCKN"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.OgrNo) HeaderText="Öğrenci No"></GridColumn>
        <GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="Akademik Bilgiler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<div class="col-12 text-right">
    <SfProgressButton OnClick="AddNew" Content="Yeni Öğrenci Kaydı >" CssClass="center-block e-primary">
        <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
    </SfProgressButton>
</div>



@code{


    public SfGrid<OgrenciDto> OgrGrid;
    OgrenciDto target;


    List<OgrenciDto> OgrGridDtos;// = new List<OgrenciDto>();

    public OgrenciDto _OgrenciDto { get; set; } = new OgrenciDto();


    protected override async Task OnInitializedAsync()
    {
        await ReadOgrencis();
    }

    async Task ReadOgrencis()
    {
        //ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>($"api/Admin/GetOgrenciUsers?pageSize={10}&pageNumber={0}");
        try
        {
            ApiResponseDto<List<OgrenciDto>> apiResponse =await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>("api/ogrenci");
            if (apiResponse.IsSuccessStatusCode)
            {
                OgrGridDtos = apiResponse.Result;
                matToaster.Add(apiResponse.Message, MatToastType.Success, "Öğrenciler getirildi.");
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }

    }



    public async void ActionCompletedHandler(ActionEventArgs<OgrenciDto> args)
    {
        var FilterApplied = OgrGrid.FilterSettings.Columns;
    }

    public void ActionBeginHandler(ActionEventArgs<OgrenciDto> args)
    {

    }

    //public async Task DetailDataBound(DetailDataBoundEventArgs<OgrenciDto> args)
    //{
    //    if (target != null)
    //        await OgrGrid.DetailExpandCollapseRow(target);
    //    target = args.Data;
    //}



    [Parameter]
    public EventCallback<OgrenciDto> OgrenciToAkademik { get; set; }

    public void CommandClickHandler(CommandClickEventArgs<OgrenciDto> args)
    {
        if (args.CommandColumn.Title == "Akademik Bilgiler")
        {
            _OgrenciDto = args.RowData;
            appState.OgrenciState = _OgrenciDto;
            OgrenciToAkademik.InvokeAsync(_OgrenciDto);

        }
    }


    async Task AddNew()
    {
        await OgrenciToAkademik.InvokeAsync(new OgrenciDto());
    }
    public void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }
}



<style type="text/css" class="cssStyles">
    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: medium;
        font-weight: 400;
    }

    .content {
        font-size: medium;
        color: #6c757d
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #e83e8c;
    }
</style>
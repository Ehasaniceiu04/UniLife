@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using UniLife.CommonUI.Pages.Admin.OgrenciIslem.OgrenciIslemTabs.OgrencilerTabs
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Data;
@inject AppState appState
@inject IJSRuntime Runtime
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars

@*@if (OgrGridDtos == null)
    {

        <LoadingBackground ShowLogoBox="true">
            <label>Öğrenciler Yükleniyor...</label>
        </LoadingBackground>
    }
    else
    {*@
<div class="control_wrapper accordion-control-section">
    <SfAccordion>
        <AccordionItems>
            <AccordionEvents Expanding="ExpandingHandler" Clicked="OnclickHandler"> </AccordionEvents>
            <AccordionItem  Expanded="@ExFilterOpen">
                <ContentTemplate>
                    <div class="row">
                        <div class="col-sm-6">
                            <FakBolPrg @bind-ProgramId="programId"
                                       @bind-BolumId="bolumId"
                                       @bind-FakulteId="fakulteId"
                                       @bind-MufredatId="mufredatId"
                                       ProgramShow="true"
                                       MufredatShow="true"
                                       ProgramPlaceHolder=" "></FakBolPrg>
                            <div class="form-group row">
                                <label for="KayitTarih" class="col-sm-2 col-form-label-sm">Kayıt Tarih</label>
                                <div class="col-sm-10">
                                    <SfDateRangePicker ID="KayitTarih" @bind-StartDate="@StartValue" @bind-EndDate="@EndValue">
                                        @*<DateRangePickerEvents ValueChange="@onChange"></DateRangePickerEvents>*@
                                    </SfDateRangePicker>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="AyrilTarih" class="col-sm-2 col-form-label-sm">Ayrılış Tarih</label>
                                <div class="col-sm-10">
                                    <SfDateRangePicker ID="AyrilTarih" @bind-StartDate="@StartValueAyril" @bind-EndDate="@EndValueAyril">
                                        @*<DateRangePickerEvents ValueChange="@onChange"></DateRangePickerEvents>*@
                                    </SfDateRangePicker>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-6">
                            @*<div class="form-group row">
            <label for="DropMufredat" class="col-sm-2 col-form-label-sm">Müfredat</label>
            <div class="col-sm-10">
                <SfDropDownList ID="DropMufredat" @ref="DropMufredat" ShowClearButton="true" TValue="int?" TItem="KeyValueDto" Placeholder="Müfredat seçiniz..."
                                Query="@AdIdQuery"
                                @bind-Value="@mufredatId">
                    <SfDataManager Url="odata/mufredats" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                    <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>*@

                            <div class="form-group row">
                                <label for="DropMufredat" class="col-sm-2 col-form-label-sm">Kayit Neden</label>
                                <div class="col-sm-10">
                                    <SfDropDownList @ref="DropKNe" ShowClearButton="true" TValue="int?" TItem="KeyValueDto"
                                                    Query="@AdIdQuery"
                                                    @bind-Value="@kayitNedenId">
                                        <SfDataManager Url="odata/kayitnedens" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="DropMufredat" class="col-sm-2 col-form-label-sm">Öğr. Durumu</label>
                                <div class="col-sm-10">
                                    <SfDropDownList @ref="DropOgrDurum" ShowClearButton="true" TValue="int?" TItem="KeyValueDto"
                                                    Query="@AdIdQuery"
                                                    @bind-Value="@ogrenimDurumId">
                                        <SfDataManager Url="odata/OgrenimDurums" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="DropMufredat" class="col-sm-2 col-form-label-sm">Öğr. Türü</label>
                                <div class="col-sm-10">
                                    <SfDropDownList @ref="DropOgrTur" ShowClearButton="true" TValue="int?" TItem="KeyValueDto"
                                                    Query="@AdIdQuery"
                                                    @bind-Value="@ogrenimTurId">
                                        <SfDataManager Url="odata/ogrenimturs" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>

                            <SfButton OnClick="Refresh" CssClass="e-success col-sm-12 form-control-sm">Bul / Yenile</SfButton>

                        </div>
                    </div>
                </ContentTemplate>

            </AccordionItem>
        </AccordionItems>
    </SfAccordion>
</div>

@*DataSource = "@OgrGridDtos"*@
<SfGrid ID="OgrGrid" @ref="OgrGrid" Query="@totalQuery" TValue="OgrenciDto" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
    @*OnActionFailure="ActionFailureHandler" DetailDataBound="DetailDataBound"  OnActionBegin="ActionBeginHandler" DetailDataBound="DetailDataBound" RowDataBound="RowBound"*@
    <SfDataManager Url="@OdataQuery" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
    <GridEvents TValue="OgrenciDto" CommandClicked="CommandClickHandler" DetailDataBound="DetailDataBound" DataBound="DataBound" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
    @*<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>*@
    <GridTemplates>
        <DetailTemplate>
            @{
                var ogrenciInfo = (context as OgrenciDto);

            }
            <div style="padding:20px">

                <SfTab LoadOn="ContentLoad.Demand">
                    <TabEvents Selecting="OnTabSelecting"></TabEvents>
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Detay"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <OgrenciBilgi ogrenciId="ogrenciInfo.Id"></OgrenciBilgi>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="İletişim Bilgileri"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <OgrenciIletisim _OgrenciDto="ogrenciInfo"></OgrenciIletisim>
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Roller"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <div @onkeydown:stopPropagation="true">
                                    <OgrenciRoles _OgrenciDto="ogrenciInfo"></OgrenciRoles>
                                </div>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </DetailTemplate>
    </GridTemplates>
    <GridColumns>
        <GridColumn Visible="false" Field=@nameof(OgrenciDto.ApplicationUserId) AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.Ad) HeaderText="Ad"> </GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.Soyad) HeaderText="Soyad"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.TCKN) HeaderText="TCKN"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.OgrNo) HeaderText="Öğrenci No"></GridColumn>
        <GridColumn Field=@nameof(OgrenciDto.Sinif) HeaderText="Sınıf"></GridColumn>
        @*<GridColumn Field=@nameof(OgrenciDto.KayitTarih) Format="d" Type="ColumnType.Date" HeaderText="KayitTarih"></GridColumn>*@
        <GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="Akademik Bilgiler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" , Content="Öğr. Detay" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
@*}*@



<div class="col-12 text-right">
    <SfProgressButton OnClick="AddNew" Content="Yeni Öğrenci Kaydı >" CssClass="center-block e-primary">
        <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
    </SfProgressButton>
</div>



@code{


    public SfGrid<OgrenciDto> OgrGrid;
    OgrenciDto target;


    //List<OgrenciDto> OgrGridDtos;// = new List<OgrenciDto>();

    public OgrenciDto _OgrenciDto { get; set; } = new OgrenciDto();

    string OdataQuery = "odata/ogrencis";
    //public Query totalQuery = new Query().Expand(new List<string> { "program($select=Id,Ad)", "Danisman($select=Id,Ad)", "Bolum($select=Id,Ad)", "Fakulte($select=Id,Ad)" });
    public Query totalQuery = new Query();


    bool ExFilterOpen;

    int? programId;
    int? bolumId;
    int? fakulteId;
    int? mufredatId;
    int? kayitNedenId;
    int? ogrenimDurumId;
    int? ogrenimTurId;

    SfDropDownList<int?, KeyValueDto> DropMufredat;
    public Query AdIdQuery = new Query().Select(new List<string> { "Id", "Ad" }).RequiresCount();

    SfDropDownList<int?, KeyValueDto> DropKNe;
    SfDropDownList<int?, KeyValueDto> DropOgrDurum;
    SfDropDownList<int?, KeyValueDto> DropOgrTur;


    public DateTime? StartValue { get; set; }
    public DateTime? EndValue { get; set; }

    public DateTime? StartValueAyril { get; set; }
    public DateTime? EndValueAyril { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await ReadOgrencis();
    }

    //async Task ReadOgrencis()
    //{
    //    //ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>($"api/Admin/GetOgrenciUsers?pageSize={10}&pageNumber={0}");
    //    try
    //    {
    //        ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>("api/ogrenci");
    //        if (apiResponse.IsSuccessStatusCode)
    //        {
    //            OgrGridDtos = apiResponse.Result;
    //            matToaster.Add(apiResponse.Message, MatToastType.Success, "Öğrenciler getirildi.");
    //        }
    //        else
    //            matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
    //    }
    //    catch (Exception ex)
    //    {
    //        matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
    //    }

    //}



    public async void ActionCompletedHandler(ActionEventArgs<OgrenciDto> args)
    {
        var FilterApplied = OgrGrid.FilterSettings.Columns;
    }

    public void ActionBeginHandler(ActionEventArgs<OgrenciDto> args)
    {

    }

    //public async Task DetailDataBound(DetailDataBoundEventArgs<OgrenciDto> args)
    //{
    //    if (target != null)
    //        await OgrGrid.DetailExpandCollapseRow(target);
    //    target = args.Data;
    //}



    [Parameter]
    public EventCallback<OgrenciDto> OgrenciToAkademik { get; set; }

    public void CommandClickHandler(CommandClickEventArgs<OgrenciDto> args)
    {
        if (args.CommandColumn.Title == "Akademik Bilgiler")
        {
            _OgrenciDto = args.RowData;
            appState.OgrenciState = _OgrenciDto;
            OgrenciToAkademik.InvokeAsync(_OgrenciDto);

        }
    }




    async Task AddNew()
    {
        await OgrenciToAkademik.InvokeAsync(new OgrenciDto());
    }
    public void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }


    public bool firstrender { get; set; } = true;
    public async Task DataBound()
    {
        if (firstrender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);           // create dotnet ref
            await Runtime.InvokeAsync<string>("detail", dotNetReference);       // send the dotnet ref to JS side
            firstrender = false;
        }
    }
    public async Task DetailDataBound(DetailDataBoundEventArgs<OgrenciDto> args)
    {
        if (target != null)
        {
            if (target == args.Data)              // return when target is equal to args.data
            {
                return;
            }
            await OgrGrid.DetailExpandCollapseRow(target);
        }
        target = args.Data;
    }

    [JSInvokable("DetailCollapse")]              // method called from JS when collapse is done
    public void DetailRowCollapse()
    {
        target = null;                   // empty the target when collapse action is done
    }

    async Task Refresh()
    {
        totalQuery = new Query();
        //totalQuery.Expand(new List<string> { "program($select=Id,Ad)", "Akademisyen($select=Id,Ad)" });
        totalQuery.Expand(new List<string> { "program($select=Id,Ad)", "Danisman($select=Id,Ad)", "Bolum($select=Id,Ad)", "Fakulte($select=Id,Ad)" });




        if (StartValue.HasValue)
        {
            //totalQuery.Where(new WhereFilter() { Field = $"KayitTarih gt {StartValue}" });
            //totalQuery.Where("KayitTarih", "GreaterThanOrEqual", StartValue);
            totalQuery.Where("KayitTarih", "gl", StartValue?.ToString("yyyy-MM-dd"));
        }
        //if (EndValue.HasValue)
        //{
        //    //totalQuery.Where("KayitTarih", "LessThanOrEqual", EndValue);
        //}

        if (mufredatId.HasValue)
        {
            totalQuery.Where("mufredatId", "equal", mufredatId);
        }
        else if (programId.HasValue)
        {
            totalQuery.Where("programId", "equal", programId);
        }
        else if (bolumId.HasValue)
        {
            totalQuery.Where("bolumId", "equal", bolumId);
        }
        else if (fakulteId.HasValue)
        {
            totalQuery.Where("fakulteId", "equal", fakulteId);
        }

        if (ogrenimTurId.HasValue)
        {
            totalQuery.Where("ogrenimturId", "equal", ogrenimTurId);
        }
        if (ogrenimDurumId.HasValue)
        {
            totalQuery.Where("ogrenimDurumId", "equal", ogrenimDurumId);
        }
        if (kayitNedenId.HasValue)
        {
            totalQuery.Where("kayitNedenId", "equal", kayitNedenId);
        }
    }

    public void OnclickHandler(AccordionClickArgs args)
    {

    }
    public void ExpandingHandler(ExpandEventArgs args)
    {
        if (!args.IsExpanded)
        {
            totalQuery = new Query();
        }
    }



}



<style type="text/css" class="cssStyles">
    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: medium;
        font-weight: 400;
    }

    .content {
        font-size: medium;
        color: #6c757d
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8 !important;
    }

    .e-grid td.e-active {
        background-color: #a2fdff;
    }

    .form-group {
        margin-bottom: unset;
    }

    .col-form-label-sm {
        padding-bottom: unset;
    }

    .e-accordion .e-acrdn-item.e-select .e-acrdn-panel .e-acrdn-content {
        background: #a2d4e3;
    }
</style>
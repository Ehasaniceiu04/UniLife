@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject AppState appState

    <SfGrid ID="OgrNotlar" @ref="OgrNotlar" DataSource="@ogrenciNotlarDtos" Toolbar="@(new List<string>() {"Edit", "Update", "Cancel" })" AllowPaging="true">
        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(OgrenciNotlarDto.SinavId) HeaderText="Sinav Id" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
            <GridColumn Field=@nameof(OgrenciNotlarDto.SinavTip) HeaderText="Sinav Tip"></GridColumn>
            <GridColumn Field=@nameof(OgrenciNotlarDto.DersAd) HeaderText="Ders Ad"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(OgrenciNotlarDto.OgrenciId) HeaderText="Ogrenci Id"></GridColumn>
            <GridColumn Field=@nameof(OgrenciNotlarDto.OgrNot) HeaderText="Notu"></GridColumn>
            <GridColumn Field=@nameof(OgrenciNotlarDto.Donem) HeaderText="Dönem"></GridColumn>
            <GridColumn Field=@nameof(OgrenciNotlarDto.Sinif) HeaderText="Sınıf"></GridColumn>
        </GridColumns>
    </SfGrid>

@code{

    SfGrid<OgrenciNotlarDto> OgrNotlar;

    List<OgrenciNotlarDto> ogrenciNotlarDtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApiResponseDto<List<OgrenciNotlarDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciNotlarDto>>>("api/sinavKayit/GetOgrenciNotlar/" + appState.OgrenciState.Id);

            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add($"{appState.OgrenciState.Ad} 'nin not bilgileri getirildi.", MatToastType.Success);
                ogrenciNotlarDtos = apiResponse.Result;
            }
            else
            {
                ogrenciNotlarDtos = new List<OgrenciNotlarDto>();
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "İşlem başarısız!");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }
    }

}
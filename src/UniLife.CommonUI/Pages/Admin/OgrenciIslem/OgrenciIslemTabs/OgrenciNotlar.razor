@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject AppState appState

<SfGrid ID="OgrNotlar" @ref="OgrNotlar" AllowGrouping="true" DataSource="@ogrenciNotlarDtos" Toolbar="@(new List<string>() {"Edit", "Update", "Cancel" })" AllowPaging="true">
    <GridEditSettings AllowEditing="true"></GridEditSettings>
    <GridEvents TValue="OgrenciNotlarDto" QueryCellInfo="QueryCellInfoHandler" OnActionBegin="OnActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
    <GridGroupSettings ShowDropArea="false" Columns="@Initial"></GridGroupSettings>
    <GridColumns>
        <GridColumn Visible="false" Field=@nameof(OgrenciNotlarDto.SinavId) HeaderText="Sinav Id" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
        <GridColumn Visible="false" Field=@nameof(OgrenciNotlarDto.DersId) AllowEditing="false"></GridColumn>
        <GridColumn Field=@nameof(OgrenciNotlarDto.SinavTip) HeaderText="Sinav Tip" AllowEditing="false"></GridColumn>
        <GridColumn Field=@nameof(OgrenciNotlarDto.DersAd) HeaderText="Ders Ad" AllowEditing="false"></GridColumn>
        <GridColumn Visible="false" Field=@nameof(OgrenciNotlarDto.OgrenciId) AllowEditing="false" HeaderText="Ogrenci Id"></GridColumn>
        <GridColumn Field=@nameof(OgrenciNotlarDto.OgrNot) HeaderText="Notu"></GridColumn>
        <GridColumn Field=@nameof(OgrenciNotlarDto.Donem) HeaderText="Dönem" AllowEditing="false"></GridColumn>
        <GridColumn Field=@nameof(OgrenciNotlarDto.Sinif) HeaderText="Sınıf" AllowEditing="false"></GridColumn>
    </GridColumns>
</SfGrid>

@code{

    SfGrid<OgrenciNotlarDto> OgrNotlar;

    List<OgrenciNotlarDto> ogrenciNotlarDtos;
    string[] Initial = (new string[] { "Sinif", "Donem" });

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApiResponseDto<List<OgrenciNotlarDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciNotlarDto>>>("api/sinavKayit/GetOgrenciNotlar/" + appState.OgrenciState.Id);

            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add($"{appState.OgrenciState.Ad} 'nin not bilgileri getirildi.", MatToastType.Success);
                ogrenciNotlarDtos = apiResponse.Result;
            }
            else
            {
                ogrenciNotlarDtos = new List<OgrenciNotlarDto>();
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "İşlem başarısız!");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }
    }

    OgrenciNotlarDto ogrenciNotlarDtoOnceki = new OgrenciNotlarDto();

    public async Task OnActionBeginHandler(ActionEventArgs<OgrenciNotlarDto> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                ogrenciNotlarDtoOnceki = args.PreviousData.DeepClone();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task ActionCompletedHandler(ActionEventArgs<OgrenciNotlarDto> args)
    {

        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                //SinavKayitDto sinavKayitDto = new SinavKayitDto
                //{
                //    Id = args.Data.SinavKayitId,
                //    OgrenciId = args.Data.OgrenciId,
                //    OgrNot = args.Data.OgrNot,
                //    SinavId = args.Data.SinavId
                //};


                ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/sinavKayit/PutOgrenciSinavKayitNot", args.RowData);
                if (apiResponse.IsSuccessStatusCode)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
                }
                else
                {
                    var zxc = ogrenciNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
                    zxc.OgrNot = ogrenciNotlarDtoOnceki.OgrNot;
                    OgrNotlar.Refresh();
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
                }

            }
        }
        catch (Exception ex)
        {
            var zxc= ogrenciNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
            zxc.OgrNot = ogrenciNotlarDtoOnceki.OgrNot ;
            OgrNotlar.Refresh();
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }

    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<OgrenciNotlarDto> args)
    {
        //# aeffc0
        args.Cell.AddStyle(new string[] { "background-color:#e8f5bc" });

    }

}
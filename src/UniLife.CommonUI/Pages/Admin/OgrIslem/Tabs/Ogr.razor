
@using UniLife.Shared.Dto.Account
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using System.Net
@using Newtonsoft.Json
@if (userInfoDtos == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading Users</label>
    </LoadingBackground>
}
else
{
    <ControlSection>
        @*@(new List<string>() { "Add", "Edit", "Delete","ExcelExport", "CsvExport", "PdfExport","Search","ColumnChooser" })*@
        <SfGrid ShowColumnChooser="true"  ID="UserGrid" @ref="UserGrid" DataSource="@userInfoDtos" Toolbar="Toolbaritems" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
            <GridEvents OnActionFailure="ActionFailureHandler" CommandClicked="CommandClickHandler" OnToolbarClick="ToolbarClickHandler" OnActionComplete="ActionCompletedHandler" OnActionBegin="ActionBeginHandler" TValue="UserInfoDto"></GridEvents>
            
            <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" ShowDeleteConfirmDialog="true">
                @*<HeaderTemplate>
                        Records Details
                    </HeaderTemplate>*@
                <Template>
                    @{
                        UserInfoDto userInfo = (context as UserInfoDto);
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>User Id</label>
                                    <SfTextBox ID="UserId" CssClass="form-control form-control-sm" Value="@(userInfo.UserId.ToString())" Enabled="@false"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>First Name</label>
                                    <SfTextBox ID="FirstName" Value="@(userInfo.FirstName)" Enabled="@true"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>E-mail</label>
                                    <SfTextBox ID="Email" Value="@(userInfo.Email)" Enabled="@true"></SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Roller</label>
                                    <MatChipSet>
                                        @foreach (var role in roleSelections.OrderBy(x => x.Name))
                                        {
                                            <MatChip Label="@role.Name" LeadingIcon="@( (role.IsSelected) ? "done" : "")" @onclick="@(() => UpdateUserRole(role))" />
                                        }
                                    </MatChipSet>
                                </div>
                                @*<div class="form-group col-md-6">
                                        <label>First Name</label>
                                        <SfAutoComplete Placeholder="Customer Name" TItem="Order" ID="customerID" FloatLabelType="FloatLabelType.Auto" Value="@(Order.CustomerID)" TValue="string" DataSource="@GridData">
                                            <AutoCompleteFieldSettings Value="CustomerID"></AutoCompleteFieldSettings>
                                        </SfAutoComplete>
                                    </div>*@
                                @*<div class="form-group col-md-6">
                                        <label>Order Date</label>
                                        <SfDatePicker ID="OrderDate" Value="@(Order.OrderDate)"></SfDatePicker>
                                    </div>*@
                            </div>
                            @*<div class="form-row">
                                    <div class="form-group col-md-12">
                                        <label>Roller</label>
                                        <MatChipSet>
                                            @foreach (var role in roleSelections.OrderBy(x => x.Name))
                                            {
                                            <MatChip Label="@role.Name" LeadingIcon="@( (role.IsSelected) ? "done" : "")" @onclick="@(()=>UpdateUserRole(role))" />
                                            }
                                        </MatChipSet>
                                    </div>
                                </div>*@
                        </div>
                    }
                </Template>
                @*<FooterTemplate>
                        <button>Save</button>
                        <button>Cancel</button>
                    </FooterTemplate>*@
            </GridEditSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(UserInfoDto.UserId) HeaderText="Öğrenci ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                <GridColumn Field=@nameof(UserInfoDto.FirstName) HeaderText="Öğrenci İsim" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
                <GridColumn Field=@nameof(UserInfoDto.Email) HeaderText="Email" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
                <GridColumn Field=@nameof(UserInfoDto.Roles) HeaderText="Roles">
                    <Template>
                        @{
                            UserInfoDto userInfo = (context as UserInfoDto);
                            <MatChipSet>
                                @foreach (var role in userInfo.Roles)
                                {
                                    <MatChip Label="@role"></MatChip>
                                }
                            </MatChipSet>
                        }
                    </Template>
                    @*<EditTemplate>
                            @{

                                <MatChipSet>
                                    @foreach (var role in roleSelections.OrderBy(x => x.Name))
                                    {
                                    <MatChip Label="@role.Name" LeadingIcon="@( (role.IsSelected) ? "done" : "")" @onclick="@(()=>UpdateUserRole(role))" />
                                    }
                                </MatChipSet>
                            }
                        </EditTemplate>*@
                </GridColumn>
                <GridColumn HeaderText="Navigation" Width="120">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="abc"
                                           ButtonOption="@(new CommandButtonOptions()
                                                       {
                                                           IconCss = "remove-image-icon-icon-image", Content = "customcommand"
                                                       })" />
                    </GridCommandColumns>
                </GridColumn>

            </GridColumns>
        </SfGrid>
    </ControlSection>



    <MatDialog @bind-IsOpen="@createUserDialogOpen">
        <MatDialogTitle>Create User</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@registerParameters" OnValidSubmit="@CreateUserAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@registerParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@registerParameters.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { createUserDialogOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@CreateUserAsync">Create User</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@deleteUserDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
        <MatDialogContent>
            Are you sure you want to delete user "@userInfoDto.UserName" ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { deleteUserDialogOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@DeleteUserAsync">Delete</MatButton>
        </MatDialogActions>
    </MatDialog>
}


@code{
    SfGrid<UserInfoDto> UserGrid;

    List<UserInfoDto> userInfoDtos;
    public UserInfoDto userInfoDto { get; set; } = new UserInfoDto(); // Holds user being actively modified or created
    RegisterDto registerParameters { get; set; } = new RegisterDto();
    List<RoleSelection> roleSelections { get; set; } = new List<RoleSelection>();

    bool createUserDialogOpen = false;
    bool deleteUserDialogOpen = false;

    private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "ExcelExport", "CsvExport", "PdfExport", "Search", "ColumnChooser", new ItemModel() { Text = "Click", TooltipText = "Click", PrefixIcon = "e-click", Id = "Click" } };

    public class RoleSelection
    {
        public bool IsSelected { get; set; }
        public string Name { get; set; }
    };



    protected override async Task OnInitializedAsync()
    {
        await ReadOgrencis();
        await PopulateRoleList();
    }
    public async Task PopulateRoleList()
    {
        try
        {
            var roleNames = new List<string>();
            var response = await Http.GetFromJsonAsync<ApiResponseDto<List<string>>>("api/Account/ListRoles");

            roleNames = response.Result;

            roleSelections = new List<RoleSelection>();// clear out list

            // initialize selection list with all un-selected
            foreach (string role in roleNames)
            {
                roleSelections.Add(new RoleSelection
                {
                    Name = role,
                    IsSelected = false
                });
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Role Retrieval Error");
        }
    }



    protected void UpdateUserRole(RoleSelection roleSelectionItem)
    {
        roleSelectionItem.IsSelected = !roleSelectionItem.IsSelected;
    }

    public void OpenEditDialog(Guid userId)
    {
        userInfoDto = new UserInfoDto(); // reset user object
        userInfoDto = userInfoDtos.Where(x => x.UserId == userId).SingleOrDefault();  // load the user information into the temp user object for worry free editing
        foreach (var role in roleSelections)
            role.IsSelected = userInfoDto.Roles.Contains(role.Name);

        userInfoDto.SaveState();
        //editDialogOpen = true;
    }

    async Task ReadOgrencis()
    {

        var apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>($"api/Admin/Users?pageSize={10}&pageNumber={0}");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Öğrenciler getirildi");
            userInfoDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfoDto[]>(apiResponse.Result.ToString()).ToList<UserInfoDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Öğrenci bilgisi getirilirken hata oluştu!");
        }
    }

    public void CommandClickHandler(CommandClickEventArgs<UserInfoDto> args)
    {
        //Perform your custom command button click operation here. And also with the value in “args” you can differentiate the buttons, if having multiple custom command buttons.
        var zxc = args;
    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var clieckhandler = args;

        if (args.Item.Id == "Click")
        {
            //You can customized your code here....
        }
        if (args.Item.Id == "UserGrid_add")
        {
            args.Cancel = true;
            createUserDialogOpen = true;
        }
        if (args.Item.Id == "UserGrid_delete")
        {
            //args.Cancel = true;
            //deleteUserDialogOpen = true;


        }
        if (args.Item.Id == "UserGrid_pdfexport")
        {
            this.UserGrid.PdfExport();
        }
        if (args.Item.Id == "UserGrid_excelexport")
        {
            this.UserGrid.ExcelExport();
        }
        if (args.Item.Id == "UserGrid_csvexport")
        {
            this.UserGrid.CsvExport();
        }
    }

    public async void ActionCompletedHandler(ActionEventArgs<UserInfoDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            OpenEditDialog(args.RowData.UserId);
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            roleSelections.ForEach(x => x.IsSelected = false);
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {

                await UpdateUserAsync();
            }
            else if (args.Action == "Add")
            {
                await CreateUserAsync();
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var asd = args;
            await DeleteUserAsync();
        }
    }

    public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        var asd = args;
    }


    public void ActionBeginHandler(ActionEventArgs<UserInfoDto> args)
    {

    }



    public async Task UpdateUserAsync()
    {
        try
        {
            //update the user object's role list with the new selection set
            userInfoDto.Roles = roleSelections.Where(x => x.IsSelected == true).Select(x => x.Name).ToList();

            var apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Account", userInfoDto);

            if (apiResponse.IsSuccessStatusCode)
                matToaster.Add("User Updated", MatToastType.Success);
            else
            {
                matToaster.Add("Error", MatToastType.Danger, apiResponse.StatusCode.ToString());
                userInfoDto.RestoreState();
                UserGrid.Refresh();

            }

            //editDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "User Update Error");
            UserGrid.Refresh();
        }
        finally
        {
            userInfoDto.ClearState();
        }
    }

    public async Task CreateUserAsync()
    {
        try
        {
            if (registerParameters.Password != registerParameters.PasswordConfirm)
            {
                matToaster.Add("Password Confirmation Failed", MatToastType.Danger, "");
                return;
            }

            var apiResponse = await ((IdentityAuthenticationStateProvider)authStateProvider).Create(registerParameters);
            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                userInfoDto = Newtonsoft.Json.JsonConvert.DeserializeObject<UserInfoDto>(apiResponse.Result.ToString());
                userInfoDtos.Add(userInfoDto);
                registerParameters = new RegisterDto(); //reset create user object after insert
                createUserDialogOpen = false;
                UserGrid.Refresh();
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "User Creation Failed");
                userInfoDtos.Remove(userInfoDto);
                UserGrid.Refresh();
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "User Creation Error");
            UserGrid.Refresh();
        }
    }



    public async Task DeleteUserAsync()
    {
        try
        {
            var rows = await UserGrid.GetSelectedRecords();
            List<UserInfoDto> result = JsonConvert.DeserializeObject<List<UserInfoDto>>(JsonConvert.SerializeObject(rows));
            var response = await Http.DeleteAsync($"api/Account/{result.First().UserId}");
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("User Deleted", MatToastType.Success);
                //deleteUserDialogOpen = false;
                //userInfoDtos.Remove(result.First());
            }
            else
            {
                matToaster.Add("User Delete Failed", MatToastType.Danger);
                userInfoDtos.Add(result.First());
            }

        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "User Delete Error");
        }
        finally
        {
            UserGrid.Refresh();
        }
    }


}
@inject HttpClient Http;
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.Navigations

<legend>@_SinavDto.DersAcilanAd</legend>

@*OnActionComplete="ActionCompletedHandler"*@
<SfGrid ID="grdNotlar" @ref="grdNotlar" DataSource="@sinavOgrNotlarDtos" Toolbar="@(new List<string>() {"Update", "Cancel", "ExcelExport", "CsvExport", "PdfExport" })" AllowPaging="true">
    <GridEvents TValue="SinavOgrNotlarDto" QueryCellInfo="QueryCellInfoHandler" OnBatchSave="OnBatchSaveHandler" OnActionBegin="OnActionBeginHandler"></GridEvents>
    <GridEditSettings AllowEditing="true"   Mode="EditMode.Batch"></GridEditSettings>
    <GridColumns>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.SinavKayitId) HeaderText="Sinav Id" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.SinavId) HeaderText="SinavId"></GridColumn>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.OgrenciId) HeaderText="OgrenciId"></GridColumn>
        <GridColumn AllowEditing="false" Field=@nameof(SinavOgrNotlarDto.OgrenciNo) HeaderText="Öğrenci No"></GridColumn>
        <GridColumn AllowEditing="false" Field=@nameof(SinavOgrNotlarDto.OgrenciAd) HeaderText="Adı Soyadı"></GridColumn>
        <GridColumn AllowEditing="false" Field=@nameof(SinavOgrNotlarDto.OgrDigerSinavlarText) HeaderText="Tüm Notları"></GridColumn>
        <GridColumn Field=@nameof(SinavOgrNotlarDto.Katilim) EditType="EditType.DropDownEdit" HeaderText="Katılım" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@(Sabitler.SinavKatilim)"></GridColumn>
        <GridColumn Field=@nameof(SinavOgrNotlarDto.OgrNot) HeaderText="Notu" ValidationRules="@(new ValidationRules{ Required=true, Number=true,Max=100,Min=0})"></GridColumn>
    </GridColumns>
</SfGrid>
<div class="row">
    <div class="col-12 text-right">
        <Syncfusion.Blazor.Buttons.SfButton CssClass="center-block e-primary" OnClick="Yayinla">Yayinla</Syncfusion.Blazor.Buttons.SfButton>
    </div>
</div>


@code{


    SfGrid<SinavOgrNotlarDto> grdNotlar;

    List<SinavOgrNotlarDto> sinavOgrNotlarDtos;



    //[Parameter]
    //public AkademisyenSinavDto _AkademisyenSinavDto { get; set; }

    [Parameter]
    public SinavDto _SinavDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetNots();
    }

    async Task GetNots()
    {
        try
        {

            ApiResponseDto<List<SinavOgrNotlarDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<SinavOgrNotlarDto>>>("api/sinavkayit/GetSinavKayitOgrenciNotlar/" + _SinavDto.Id+"/"+ _SinavDto.DersAcilanId);



            if (apiResponse.IsSuccessStatusCode)
            {
                sinavOgrNotlarDtos = apiResponse.Result;
                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");

            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }
    }


    SinavOgrNotlarDto sinavOgrNotlarDtoOnceki = new SinavOgrNotlarDto();

    public async Task OnActionBeginHandler(ActionEventArgs<SinavOgrNotlarDto> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                sinavOgrNotlarDtoOnceki = args.PreviousData.DeepClone();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    //public async void ActionCompletedHandler(ActionEventArgs<SinavOgrNotlarDto> args)
    //{
    //    try
    //    {
    //        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
    //        {
    //            args.RowData.DersId = _SinavDto.DersAcilanId;
    //            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/sinavKayit/PutAkaOgrenciSinavKayitNot", args.RowData);
    //            if (apiResponse.IsSuccessStatusCode)
    //            {
    //                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
    //            }
    //            else
    //            {
    //                var zxc = sinavOgrNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
    //                zxc.OgrNot = sinavOgrNotlarDtoOnceki.OgrNot;
    //                grdNotlar.Refresh();
    //                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
    //            }

    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        var zxc = sinavOgrNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
    //        zxc.OgrNot = sinavOgrNotlarDtoOnceki.OgrNot;
    //        grdNotlar.Refresh();
    //        matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
    //    }
    //}

    public async Task OnBatchSaveHandler(BeforeBatchSaveArgs<SinavOgrNotlarDto> args)
    {
        try
        {
            List<SinavKayitNotBatch> sinavKayitNotBatches = args.BatchChanges.ChangedRecords
            .Select(x => new SinavKayitNotBatch
            {
                SinavKayitId = x.SinavKayitId,
                Katilim = x.Katilim,
                OgrNot = x.OgrNot
            }).ToList();

            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/SinavKayit/UpdateOgrNotsBatch", sinavKayitNotBatches);

            if (apiResponse.IsSuccessStatusCode)
            {

                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");

                await GetNots();
                grdNotlar.Refresh();
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }

    }

    async Task Yayinla()
    {

        try
        {

            ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/sinav/yayinla/"+ _SinavDto.Id);

            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }

    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<SinavOgrNotlarDto> args)
    {
        if (_SinavDto.IsYayinli)
        {
            args.Cell.AddStyle(new string[] { "background-color:#71a879" });
        }
    }
}
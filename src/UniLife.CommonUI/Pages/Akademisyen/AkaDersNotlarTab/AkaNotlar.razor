@inject HttpClient Http;
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.Navigations


<SfGrid ID="grdNotlar" @ref="grdNotlar" DataSource="@sinavOgrNotlarDtos" Toolbar="@(new List<string>() {"Edit", "Update", "Cancel", "ExcelExport", "CsvExport", "PdfExport" })" AllowPaging="true">
    <GridEvents TValue="SinavOgrNotlarDto" OnActionBegin="OnActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
    <GridEditSettings AllowEditing="true"></GridEditSettings>
    <GridColumns>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.SinavKayitId) HeaderText="Sinav Id" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.SinavId) HeaderText="SinavId"></GridColumn>
        <GridColumn AllowEditing="false" Visible="false" Field=@nameof(SinavOgrNotlarDto.OgrenciId) HeaderText="OgrenciId"></GridColumn>
        <GridColumn AllowEditing="false" Field=@nameof(SinavOgrNotlarDto.OgrenciAd) HeaderText="Öğrenci"></GridColumn>
        <GridColumn AllowEditing="false" Field=@nameof(SinavOgrNotlarDto.OgrenciNo) HeaderText="No"></GridColumn>
        <GridColumn Field=@nameof(SinavOgrNotlarDto.OgrNot) HeaderText="Notu" ValidationRules="@(new ValidationRules{ Required=true, Number=true,Max=100,Min=0})" ></GridColumn>
    </GridColumns>
</SfGrid>


@code{


    SfGrid<SinavOgrNotlarDto> grdNotlar;

    List<SinavOgrNotlarDto> sinavOgrNotlarDtos;



    //[Parameter]
    //public AkademisyenSinavDto _AkademisyenSinavDto { get; set; }

    [Parameter]
    public SinavDto _SinavDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            ApiResponseDto<List<SinavOgrNotlarDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<SinavOgrNotlarDto>>>("api/sinavkayit/GetSinavKayitOgrenciNotlar/" + _SinavDto.Id);



            if (apiResponse.IsSuccessStatusCode)
            {
                sinavOgrNotlarDtos = apiResponse.Result;
                matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");

            }
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }
    }


    SinavOgrNotlarDto sinavOgrNotlarDtoOnceki = new SinavOgrNotlarDto();

    public async Task OnActionBeginHandler(ActionEventArgs<SinavOgrNotlarDto> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                sinavOgrNotlarDtoOnceki = args.PreviousData.DeepClone();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async void ActionCompletedHandler(ActionEventArgs<SinavOgrNotlarDto> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                args.RowData.DersId = _SinavDto.DersAcilanId;
                ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/sinavKayit/PutAkaOgrenciSinavKayitNot", args.RowData);
                if (apiResponse.IsSuccessStatusCode)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
                }
                else
                {
                    var zxc = sinavOgrNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
                    zxc.OgrNot = sinavOgrNotlarDtoOnceki.OgrNot;
                    grdNotlar.Refresh();
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
                }

            }
        }
        catch (Exception ex)
        {
            var zxc = sinavOgrNotlarDtos.FirstOrDefault(x => x.SinavId == args.RowData.SinavId);
            zxc.OgrNot = sinavOgrNotlarDtoOnceki.OgrNot;
            grdNotlar.Refresh();
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
        }
    }
}
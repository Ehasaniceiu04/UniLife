@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject AppState appState
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations

@if (donemDtos == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Dersler Yükleniyor...</label>
    </LoadingBackground>
}
else
{
    <SfDropDownList ID="DropDonem" @ref="DropDonem" ShowClearButton="true" TItem="DonemDto" Index="0" CssClass="form-control-sm"
                    TValue="int?"
                    DataSource="@(donemDtos.OrderByDescending(x=>x.Yil).ThenBy(n => n.BasTarih))" @bind-Value="@(selectedDonemId)">
        <DropDownListEvents TValue="int?" ValueChange="DonemChange"></DropDownListEvents>
        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
    </SfDropDownList>

    <SfGrid ID="grdDersler" @ref="grdDersler" TValue="DersAcilanDto"  Toolbar="@(Toolbaritems)" AllowPaging="true">
        <SfDataManager Url="@(gridOdata)" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
        <GridEvents TValue="DersAcilanDto" OnToolbarClick="ToolbarClickHandler"></GridEvents>
        @*<GridGroupSettings Columns="@Initial"></GridGroupSettings>*@
        <GridTemplates>
            <DetailTemplate>
                @{
                    var dersAcilanInfo = (context as DersAcilanDto);

                    //string gridSinavOdata = $"odata/sinavs?$filter=DersAcilanId eq {dersAcilanInfo.Id}&$expand=SinavTip,SinavTur";
                }
                <div style="padding:20px">
                    <SfGrid ID="grdSinavlar" @ref="grdSinavlar" TValue="SinavDto">
                        <SfDataManager Url="@($"odata/sinavs?$filter=DersAcilanId eq {dersAcilanInfo.Id}&$expand=SinavTip,SinavTur")" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                        <GridEvents TValue="SinavDto" CommandClicked="CommandClickHandlerSinav"></GridEvents>
                        <GridColumns>
                            <GridColumn Visible="false" Field=@nameof(SinavDto.Id) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.Ad) HeaderText="Sinav"></GridColumn>
                            <GridColumn Field="SinavTip.Ad" HeaderText="Sınav Tip"></GridColumn>
                            <GridColumn Field="SinavTur.Ad" HeaderText="Sınav Tür"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.EtkiOran) HeaderText="EtkiOran"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.Tarih) HeaderText="Tarih"></GridColumn>
                            <GridColumn>
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" Title="Sınava Git" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </DetailTemplate>
        </GridTemplates>

        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="DersAcilanId" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
            <GridColumn Field=@nameof(DersAcilanDto.Kod) HeaderText="Ders Kod"></GridColumn>
            <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Ad"></GridColumn>
            <GridColumn Field="Donem.Ad" HeaderText="Donem"></GridColumn>
            @*<GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Ders Sınavları" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>*@
        </GridColumns>
        @*<GridGroupSettings Columns=@Template>
            <CaptionTemplate>
                @{
                    var donemContext = (context as CaptionTemplateContext);
                    <div><b>@donemContext.Key</b></div>
                }

            </CaptionTemplate>
        </GridGroupSettings>*@
    </SfGrid>

}


@code{

    SfDropDownList<int?, DonemDto> DropDonem;
    int? selectedDonemId;

    //string[] Initial = (new string[] { "Donem.Ad" });
    //string[] Template = (new string[] { "Donem.Ad" });

    SfGrid<DersAcilanDto> grdDersler;
    SfGrid<SinavDto> grdSinavlar;

    //List<AkademisyenDersDto> akademisyenDersDtos;

    AkademisyenDto akademisyenDto = new AkademisyenDto();

    [Parameter]
    public int SpesificDersAcilan { get; set; }

    string gridOdata;

    List<DonemDto> donemDtos = new List<DonemDto>();

    [Parameter]
    public AkademisyenDto _AkademisyenDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApiResponseDto<List<DonemDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<DonemDto>>>("api/donem");
            donemDtos = apiResponse.Result;

            if (SpesificDersAcilan == 0)
            {
                if (_AkademisyenDto == null)
                {
                    akademisyenDto = await appState.GetAkademisyenState();
                }
                else
                {
                    akademisyenDto = _AkademisyenDto;
                }

                gridOdata = $"odata/dersacilans?$expand=akademisyen($select=Ad,Id),donem($select=Ad,Id)&$select=Ad,Id,Kod&$filter=akademisyen/Id eq {akademisyenDto.Id} and donem/Id eq {selectedDonemId}";
            }
            else
            {
                gridOdata = $"odata/dersacilans?$filter=Id eq {SpesificDersAcilan}";
            }



            //ApiResponseDto<List<AkademisyenDersDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<AkademisyenDersDto>>>("api/sinav/GetDersAcilanByAkademisyenId/" + akademisyenDto.Id);

            //if (apiResponse.IsSuccessStatusCode)
            //{
            //    matToaster.Add($"Sinav bilgileri getirildi.", MatToastType.Success);
            //    //AkademisyenSinavDtos = apiResponse.Result;
            //}
            //else
            //{
            //    //AkademisyenSinavDtos = new List<AkademisyenSinavDto>();
            //    matToaster.Add(apiResponse.Message, MatToastType.Danger, "İşlem başarısız!");
            //}
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }
    }

    //[Parameter]
    //public EventCallback<DersAcilanDto> DerslerToOgrNotlar { get; set; }

    //public void CommandClickHandler(CommandClickEventArgs<DersAcilanDto> args)
    //{
    //    if (args.CommandColumn.Title == "Ders Sınavları")
    //    {
    //        DerslerToOgrNotlar.InvokeAsync(args.RowData);
    //    }
    //}

    [Parameter]
    public EventCallback<SinavDto> SinavToNotlar { get; set; }

    public void CommandClickHandlerSinav(CommandClickEventArgs<SinavDto> args)
    {
        if (args.CommandColumn.Title == "Sınava Git")
        {
            SinavToNotlar.InvokeAsync(args.RowData);
        }
    }


    void DonemChange()
    {
        gridOdata = $"odata/dersacilans?$expand=akademisyen($select=Ad,Id),donem($select=Ad,Id)&$select=Ad,Id,Kod&$filter=akademisyen/Id eq {akademisyenDto.Id} and donem/Id eq {selectedDonemId}";
        grdDersler.Refresh();
    }

    private List<Object> Toolbaritems = new List<Object>() { "ExcelExport", "CsvExport", "PdfExport"
                                                            , new ItemModel() { Text = "Derse Yoklama", TooltipText = "Derse Yoklama", PrefixIcon = "e-click", Id = "Yokalama" }
                                                            , new ItemModel() { Text = "Kayıtlı Öğrenciler", TooltipText = "Kayıtlı Öğrenciler", PrefixIcon = "e-click", Id = "Kayitlilar" }};
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Yokalama")
        {

        }
        else if (args.Item.Id == "Kayitlilar")
        {

        }
    }

}

<style type="text/css" class="cssStyles">
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8;
    }
</style>
@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject AppState appState
@using Syncfusion.Blazor.Data

<SfGrid ID="grdDersler" @ref="grdDersler" TValue="DersAcilanDto" Toolbar="@(new List<string>() {"ExcelExport", "CsvExport", "PdfExport" })" AllowPaging="true">
    <SfDataManager Url="@(gridOdata)" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
    @*<GridEvents TValue="DersAcilanDto" CommandClicked="CommandClickHandler"></GridEvents>*@
    <GridTemplates>
        <DetailTemplate>
            @{
                var dersAcilanInfo = (context as DersAcilanDto);

                gridSinavOdata = $"odata/sinavs?$filter=DersAcilanId eq {dersAcilanInfo.Id}&$expand=SinavTip,SinavTur";
            }
            <div style="padding:20px">
                <SfGrid ID="grdSinavlar" @ref="grdSinavlar" TValue="SinavDto">
                    <SfDataManager Url="@(gridSinavOdata)" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                    <GridEvents TValue="SinavDto" CommandClicked="CommandClickHandlerSinav"></GridEvents>
                    <GridColumns>
                        <GridColumn Visible="false" Field=@nameof(SinavDto.Id) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                        <GridColumn Field=@nameof(SinavDto.Ad) HeaderText="Sinav"></GridColumn>
                        <GridColumn Field="SinavTip.Ad" HeaderText="Sınav Tip"></GridColumn>
                        <GridColumn Field="SinavTur.Ad" HeaderText="Sınav Tür"></GridColumn>
                        <GridColumn Field=@nameof(SinavDto.EtkiOran) HeaderText="EtkiOran"></GridColumn>
                        <GridColumn Field=@nameof(SinavDto.Tarih) HeaderText="Tarih"></GridColumn>
                        <GridColumn>
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.None" Title="Sınava Git" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </DetailTemplate>
    </GridTemplates>

    <GridColumns>
        <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="DersAcilanId" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Kod) HeaderText="Ders Kod"></GridColumn>
        <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Ad"></GridColumn>
        @*<GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" Title="Ders Sınavları" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>*@
    </GridColumns>
</SfGrid>


@code{

    SfGrid<DersAcilanDto> grdDersler;
    SfGrid<SinavDto> grdSinavlar;

    List<AkademisyenDersDto> akademisyenDersDtos;

    AkademisyenDto akademisyenDto = new AkademisyenDto();

    [Parameter]
    public int SpesificDersAcilan { get; set; } = 0;

    string gridOdata;
    string gridSinavOdata;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            if (SpesificDersAcilan == 0)
            {
                akademisyenDto = await appState.GetAkademisyenState();
                gridOdata = $"odata/dersacilans?$expand=akademisyen($select=Ad,Id)&$select=Ad,Id,Kod&$filter=akademisyen/Id eq {akademisyenDto.Id}";
            }
            else
            {
                gridOdata = $"odata/dersacilans?$filter=Id eq {SpesificDersAcilan}";
            }




            //ApiResponseDto<List<AkademisyenDersDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<AkademisyenDersDto>>>("api/sinav/GetDersAcilanByAkademisyenId/" + akademisyenDto.Id);

            //if (apiResponse.IsSuccessStatusCode)
            //{
            //    matToaster.Add($"Sinav bilgileri getirildi.", MatToastType.Success);
            //    //AkademisyenSinavDtos = apiResponse.Result;
            //}
            //else
            //{
            //    //AkademisyenSinavDtos = new List<AkademisyenSinavDto>();
            //    matToaster.Add(apiResponse.Message, MatToastType.Danger, "İşlem başarısız!");
            //}
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }
    }

    //[Parameter]
    //public EventCallback<DersAcilanDto> DerslerToOgrNotlar { get; set; }

    //public void CommandClickHandler(CommandClickEventArgs<DersAcilanDto> args)
    //{
    //    if (args.CommandColumn.Title == "Ders Sınavları")
    //    {
    //        DerslerToOgrNotlar.InvokeAsync(args.RowData);
    //    }
    //}

    [Parameter]
    public EventCallback<SinavDto> SinavToNotlar { get; set; }

    public void CommandClickHandlerSinav(CommandClickEventArgs<SinavDto> args)
    {
        if (args.CommandColumn.Title == "Sınava Git")
        {
            SinavToNotlar.InvokeAsync(args.RowData);
        }
    }


}

<style type="text/css" class="cssStyles">
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8;
    }
</style>
@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@inject AppState appState
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations

@attribute [Authorize(Roles = "Administrator,Personel,Akademisyen")]


@if (selectedDonemId == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Dersler Yükleniyor...</label>
    </LoadingBackground>
}
else
{
    <SfDropDownList ID="DropDonem" @ref="DropDonem" ShowClearButton="true" Index="0" TItem="DonemDto" CssClass="form-control-sm"
                    TValue="int?" Placeholder="Dönem Seçimi..."
                    DataSource="@(donemDtos.OrderByDescending(x=>x.Yil).ThenBy(n => n.BasTarih))" @bind-Value="@(selectedDonemId)">
        <DropDownListEvents TValue="int?" ValueChange="DonemChange"></DropDownListEvents>
        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
    </SfDropDownList>

    <SfGrid ID="grdDersler" @ref="grdDersler" Query="@(new Query().Where("akademisyen/Id", "equal", akademisyenDto.Id).Where("donem/Id", "equal", selectedDonemId))" TValue="DersAcilanDto" AllowFiltering="true" AllowResizing="true" Toolbar="@(Toolbaritems)" AllowPaging="true">
        <SfDataManager Url="@(OdataQuery)" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
        <GridEvents TValue="DersAcilanDto" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectedHandler"></GridEvents>
        @*<GridGroupSettings Columns="@Initial"></GridGroupSettings>*@
        <GridTemplates>
            <DetailTemplate>
                @{
                    expDersAcilan = (context as DersAcilanDto);

                    //string gridSinavOdata = $"odata/sinavs?$filter=DersAcilanId eq {dersAcilanInfo.Id}&$expand=SinavTip,SinavTur";
                }
                <div style="padding:20px">
                    <SfGrid ID="grdSinavlar" @ref="grdSinavlar" TValue="SinavDto">
                        <SfDataManager Url="@($"odata/sinavs?$filter=DersAcilanId eq {expDersAcilan.Id}&$expand=SinavTip,SinavTur")" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                        <GridEvents TValue="SinavDto" QueryCellInfo="QueryCellInfoHandler" CommandClicked="CommandClickHandlerSinav"></GridEvents>
                        <GridColumns>
                            <GridColumn Visible="false" Field=@nameof(SinavDto.Id) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.Ad) HeaderText="Sinav"></GridColumn>
                            <GridColumn Field="SinavTip.Ad" HeaderText="Sınav Tip"></GridColumn>
                            <GridColumn Field="SinavTur.Ad" HeaderText="Sınav Tür"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.EtkiOran) HeaderText="EtkiOran"></GridColumn>
                            <GridColumn Field=@nameof(SinavDto.Tarih) HeaderText="Tarih"></GridColumn>
                            <GridColumn>
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" Title="Sınava Git" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </DetailTemplate>
        </GridTemplates>

        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(DersAcilanDto.Id) HeaderText="DersAcilanId" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
            <GridColumn Field=@nameof(DersAcilanDto.Kod) HeaderText="Ders Kod"></GridColumn>
            <GridColumn Field=@nameof(DersAcilanDto.Ad) HeaderText="Ders Ad"></GridColumn>
            <GridColumn Field="Donem.Ad" HeaderText="Donem"></GridColumn>
            @*<GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Ders Sınavları" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>*@
        </GridColumns>
        @*<GridGroupSettings Columns=@Template>
                <CaptionTemplate>
                    @{
                        var donemContext = (context as CaptionTemplateContext);
                        <div><b>@donemContext.Key</b></div>
                    }

                </CaptionTemplate>
            </GridGroupSettings>*@
    </SfGrid>

    @if (isYoklamaShow)
    {
        <Dialog Baslik="Kayıtlı Öğrenciler" @bind-isDialogOpen="@isYoklamaShow">
            @*<SfGrid ID="ogrGrid" @ref="ogrGrid" TValue="OgrenciDto" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowFiltering="true">
                    <SfDataManager Url="@(ogrGridOdata)" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                    <GridColumns>
                        <GridColumn Field="Ogrenci.Ad" HeaderText="Ad"></GridColumn>
                        <GridColumn Field="Ogrenci.Soyad" HeaderText="Soyad"></GridColumn>
                        <GridColumn Field="Ogrenci.TCKN" HeaderText="TCKN"></GridColumn>
                        <GridColumn Field="Ogrenci.OgrNo" HeaderText="Öğr No"></GridColumn>
                    </GridColumns>
                </SfGrid>*@

            <SfGrid ID="ogrGrid" @ref="ogrGrid" TValue="DersKayitDto" RowHeight="20" AllowSorting="true" AllowPaging="true" AllowFiltering="true">
                <SfDataManager Url="@($"odata/derskayits?$filter=DersAcilanId eq {seciliDers.Id}&$expand=Ogrenci($select=Ad,Id,Soyad,TCKN,OgrNo)&$select=Id")" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                <GridColumns>
                    <GridColumn Visible="false" Field="Ogrenci.Id" IsPrimaryKey="true" TextAlign="TextAlign.Right"></GridColumn>
                    <GridColumn Field="Ogrenci.Ad" HeaderText="Ad"></GridColumn>
                    <GridColumn Field="Ogrenci.Soyad" HeaderText="Soyad"></GridColumn>
                    <GridColumn Field="Ogrenci.TCKN" HeaderText="TCKN"></GridColumn>
                    <GridColumn Field="Ogrenci.OgrNo" HeaderText="Öğr No"></GridColumn>
                </GridColumns>
            </SfGrid>
        </Dialog>
    }

}


@code{

    string OdataQuery = "odata/dersacilans";
    public Query totalQuery = new Query();//.Expand(new List<string> { "Akademisyen($select=Id,Ad)", "Donem($select=Id,Ad)" });



    bool isYoklamaShow;
    SfGrid<DersKayitDto> ogrGrid;
    string ogrGridOdata = "";

    SfDropDownList<int?, DonemDto> DropDonem;
    int? selectedDonemId;

    //string[] Initial = (new string[] { "Donem.Ad" });
    //string[] Template = (new string[] { "Donem.Ad" });

    SfGrid<DersAcilanDto> grdDersler;
    SfGrid<SinavDto> grdSinavlar;

    //List<AkademisyenDersDto> akademisyenDersDtos;

    AkademisyenDto akademisyenDto = new AkademisyenDto();

    [Parameter]
    public int SpesificDersAcilan { get; set; }

    string gridOdata;

    List<DonemDto> donemDtos = new List<DonemDto>();

    [Parameter]
    public AkademisyenDto _AkademisyenDto { get; set; }

    DersAcilanDto expDersAcilan;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ApiResponseDto<List<DonemDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<DonemDto>>>("api/donem");
            donemDtos = apiResponse.Result;




            if (SpesificDersAcilan == 0)
            {
                if (_AkademisyenDto == null)
                {
                    akademisyenDto = await appState.GetAkademisyenState();
                }
                else
                {
                    akademisyenDto = _AkademisyenDto;
                }
                var aktifDonem = await appState.GetDonemState();

                //gridOdata = $"odata/dersacilans?$expand=akademisyen($select=Ad,Id),donem($select=Ad,Id)&$select=Ad,Id,Kod&$filter=akademisyen/Id eq {akademisyenDto.Id} and donem/Id eq {aktifDonem.Id}";
            }
            else
            {
                //gridOdata = $"odata/dersacilans?$filter=Id eq {SpesificDersAcilan}";
            }

            selectedDonemId = donemDtos.FirstOrDefault(x => x.Durum == true).Id;



            StateHasChanged();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "İşlem başarısız!");
        }
    }

    //[Parameter]
    //public EventCallback<DersAcilanDto> DerslerToOgrNotlar { get; set; }

    //public void CommandClickHandler(CommandClickEventArgs<DersAcilanDto> args)
    //{
    //    if (args.CommandColumn.Title == "Ders Sınavları")
    //    {
    //        DerslerToOgrNotlar.InvokeAsync(args.RowData);
    //    }
    //}

    [Parameter]
    public EventCallback<SinavDto> SinavToNotlar { get; set; }

    public void CommandClickHandlerSinav(CommandClickEventArgs<SinavDto> args)
    {
        if (args.CommandColumn.Title == "Sınava Git")
        {
            args.RowData.DersAcilanAd = expDersAcilan.Ad + " - " + args.RowData.SinavTip.Ad;
            SinavToNotlar.InvokeAsync(args.RowData);
        }
    }


    async Task DonemChange()
    {
        //gridOdata = $"odata/dersacilans?$expand=akademisyen($select=Ad,Id),donem($select=Ad,Id)&$select=Ad,Id,Kod&$filter=akademisyen/Id eq {akademisyenDto.Id} and donem/Id eq {selectedDonemId}";
        //totalQuery = new Query()
        //        .Where("akademisyen/Id", "equal", akademisyenDto.Id)
        //        .Where("donem/Id", "equal", selectedDonemId);
        await Task.Delay(1000);
        grdDersler.Refresh();
        StateHasChanged();
    }

    private List<Object> Toolbaritems = new List<Object>() { "ExcelExport", "CsvExport", "PdfExport"
                                                            , new ItemModel() { Text = "Ders Yoklama", TooltipText = "Derse Yoklama", PrefixIcon = "e-click", Id = "Yokalama" }
                                                            , new ItemModel() { Text = "Kayıtlı Öğrenciler", TooltipText = "Kayıtlı Öğrenciler", PrefixIcon = "e-click", Id = "Kayitlilar" }};
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Yokalama")
        {
            ogrGridOdata = $"odata/derskayits?$filter=DersAcilanId eq {seciliDers.Id}&$expand=Ogrenci($select=Ad,Id,Soyad,TCKN,OgrNo)&$select=Id";
            isYoklamaShow = true;
        }
        else if (args.Item.Id == "Kayitlilar")
        {

        }
    }

    DersAcilanDto seciliDers;
    public async Task RowSelectedHandler(Syncfusion.Blazor.Grids.RowSelectEventArgs<DersAcilanDto> args)
    {
        seciliDers = args.Data;
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<SinavDto> args)
    {
        if (args.Data.SinavTipId == (int)SinavTipEnum.Ara_Sinav)
        {
            args.Cell.AddStyle(new string[] { "background-color:#ebdc88" });
        }
        else if (args.Data.SinavTipId == (int)SinavTipEnum.Mazeret)
        {
            args.Cell.AddStyle(new string[] { "background-color:#ff8095" });
        }
        else if (args.Data.SinavTipId == (int)SinavTipEnum.Final)
        {
            args.Cell.AddStyle(new string[] { "background-color:#99ffca" });
        }
        else if(args.Data.SinavTipId == (int)SinavTipEnum.But)
        {
            args.Cell.AddStyle(new string[] { "background-color:#6eff7f" });
        }

    }

}

<style type="text/css" class="cssStyles">
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8;
    }
</style>
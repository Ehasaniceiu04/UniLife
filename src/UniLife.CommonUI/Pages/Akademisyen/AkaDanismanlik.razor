
@page "/akademisyen_Danismanlik"

@inject HttpClient Http;
@inject IMatToaster matToaster
@using UniLife.Shared.Dto.Definitions
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using UniLife.CommonUI.Pages.Admin.OgrenciIslem.OgrenciIslemTabs
@using UniLife.Shared.DataModels
@inject AppState appState

@attribute [Authorize(Roles = "Administrator,Personel,Akademisyen")]


<div class="control-section e-tab-section">
    <SfTab @ref="DanismanTab" LoadOn="ContentLoad.Dynamic">
        @*Selected="OnTabSelected" Selecting="OnTabSelecting"*@
        <TabEvents Created="TabCreate" Selecting="OnTabSelecting"></TabEvents>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Öğrenciler"></TabHeader>
                </ChildContent>
                <ContentTemplate>

                    <SfGrid ID="grdOgr" @ref="grdOgr" TValue="OgrenciOnay" Toolbar="@(Toolbaritems)" AllowPaging="true">
                        <SfDataManager Url="odata/GetOgrenciForDanisman" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
                        <GridEvents TValue="OgrenciOnay"  QueryCellInfo="QueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" CommandClicked="CommandClickHandler"></GridEvents>
                        <GridColumns>
                            <GridColumn Visible="false" Field=@nameof(OgrenciOnay.Id) HeaderText="Id" AllowEditing="false" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(OgrenciOnay.Ad) HeaderText="Ad"></GridColumn>
                            <GridColumn Field=@nameof(OgrenciOnay.Soyad) HeaderText="Soyad"></GridColumn>
                            <GridColumn Field=@nameof(OgrenciOnay.OgrNo) HeaderText="OgrNo"></GridColumn>
                            <GridColumn Field=@nameof(OgrenciOnay.TCKN) HeaderText="TCKN"></GridColumn>
                            <GridColumn Field=@nameof(OgrenciOnay.DersKayitOnayli) DisplayAsCheckBox="true" HeaderText="Onayli"></GridColumn>
                            <GridColumn>
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" Title="Ders Kayıt Onayı" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat",Content="Ders Onay " })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Öğrenci Ders Onay"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    @*TODO: Ders Onay ekranı nasıl yapılsın. Full mu küçük mü?*@
                    <DersKayit _OgrenciDto="_OgrenciDto"></DersKayit>
                </ContentTemplate>
            </TabItem>

        </TabItems>
    </SfTab>
</div>

@code{

    bool OgrenciSelected = false;

    public OgrenciDto _OgrenciDto { get; set; } = new OgrenciDto();

    SfTab DanismanTab;


    SfGrid<OgrenciOnay> grdOgr;

    //string gridOdata = "odata/ogrencis/GetForDanisman";

    private List<Object> Toolbaritems = new List<Object>() { "ExcelExport", "CsvExport", "PdfExport" };
    //, new ItemModel() { Text = "Derse Yoklama", TooltipText = "Derse Yoklama", PrefixIcon = "e-click", Id = "Yokalama" }
    //, new ItemModel() { Text = "Kayıtlı Öğrenciler", TooltipText = "Kayıtlı Öğrenciler", PrefixIcon = "e-click", Id = "Kayitlilar" }};

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Yokalama")
        {

        }
        else if (args.Item.Id == "Kayitlilar")
        {

        }
    }

    public void CommandClickHandler(CommandClickEventArgs<OgrenciOnay> args)
    {
        if (args.CommandColumn.Title == "Ders Kayıt Onayı")
        {

            try
            {
                ApiResponseDto<OgrenciDto> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<OgrenciDto>>($"api/ogrenci/{args.RowData.Id}").Result;

                if (apiResponse.IsSuccessStatusCode)
                {
                    _OgrenciDto = apiResponse.Result;
                    appState.OgrenciState = _OgrenciDto;


                    DanismanTab.HideTab(1, false);
                    DanismanTab.Select(1);
                }
                else
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Öğrenci bilgileri alınamadı!");
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Öğrenci bilgileri alınırken hata oluştu!");
            }


        }
    }

    public void TabCreate()
    {
        DanismanTab.HideTab(1, true);
    }
    public void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
        if (args.SelectingIndex == 0 && args.PreviousIndex == 1)
        {
            DanismanTab.HideTab(1, true);
        }
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<OgrenciOnay> args)
    {
        if (!args.Data.DersKayitOnayli)
        {
            args.Cell.AddStyle(new string[] { "background-color:#eba9a9" });
        }


    }
}

<style>
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8 !important;
    }
</style>

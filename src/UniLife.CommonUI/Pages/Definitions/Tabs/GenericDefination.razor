@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster

@using System.Net

@*@typeparam TItem*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="EntityGrid" DataSource="@EntityDtos" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowPaging="true">
                @*<GridEvents OnActionComplete="ActionCompletedHandler" TValue="TItem"></GridEvents>*@
                <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridColumns>
                    <GridColumn Visible="false" Field=@nameof(EntityDto<int>.Id) HeaderText="Üniversite ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                    @ChildContent

                </GridColumns>
            </SfGrid>

        </div>
    </div>
</div>


@code{

    SfGrid<EntityDto<int>> EntityGrid;
    List<EntityDto<int>> EntityDtos = new List<EntityDto<int>>();

    [Parameter] public string ApiAdres { get; set; }
    [Parameter] public string EntityName { get; set; }

    //[Parameter]
    //public RenderFragment<TItem> TItemTemplate { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    public RenderFragment Columns { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await ReadGens();
    }

    async Task ReadGens()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>(ApiAdres); //ApiAdres

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, $"{EntityName} getirildi");
            EntityDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<EntityDto<int>[]>(apiResponse.Result.ToString()).ToList<EntityDto<int>>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, $"{EntityName} bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<EntityDto<int>> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(EntityDto<int> entityDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>(ApiAdres, entityDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                //todo = Newtonsoft.Json.JsonConvert.DeserializeObject<UniversiteDto>(apiResponse.Result.ToString());
                //todos.Add(todo);
                //todo = new TodoDto(); //reset todo after insert
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                EntityDtos.Remove(entityDto);
                EntityGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, $"{EntityName} Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            EntityDtos.Remove(entityDto);
            EntityGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, $"{EntityName} Creation Failed");
        }
    }


    public async void Update(EntityDto<int> entityDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>(ApiAdres, entityDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, $"{EntityName} Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, $"{EntityName} Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(EntityDto<int> entityDto)
    {
        try
        {
            var response = await Http.DeleteAsync(ApiAdres + entityDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add($"{EntityName} Deleted", MatToastType.Success);
                EntityDtos.Remove(entityDto);
            }
            else
            {
                matToaster.Add($"{EntityName}  Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, $"{EntityName}  Save Failed");
        }
    }


    //[Inject]
    //protected IJSRuntime JsRuntime { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var Locale = await Http.GetJsonAsyncExtension<object>("tr.json");
    //        this.JsRuntime.Sf().LoadLocaleData(Locale).SetCulture("tr");

    //        //this.JsRuntime.Sf().LoadLocaleData("tr.json").SetCulture("tr");
    //    }
    //}
}
@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using System.Net

@using Newtonsoft.Json

@*<style>
        .e-dialog {
            max-width: 30%;
        }
    </style>*@


@if (fakulteDtos == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Fakülteler Yükleniyor.</label>
    </LoadingBackground>
}
else
{
    <ControlSection>

        <SfGrid ShowColumnChooser="true" @ref="FakulteGrid" DataSource="@fakulteDtos" Toolbar="@(new List<string>() { "Add", "Edit", "Delete","ColumnChooser" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowGrouping="true" ColumnMenuItems=@MenuItems ShowColumnMenu="true" Width="100%">
            @*<SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>*@
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
            <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
            <GridEvents OnActionComplete="ActionCompletedHandler" TValue="FakulteDto"></GridEvents>
            <GridEditSettings Dialog="DialogParams" ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog">
                <Template>
                    @{
                        FakulteDto fakulteInfo = (context as FakulteDto);




                        <div class="row">

                            <div class="col-md-6">
                                <div class="form-row mt-2">
                                    <div class="col-12 pb-2">
                                        <div class="form-row">
                                            <label class="col-sm-2 col-form-label" for="Ad">Ad</label>
                                            <SfTextBox ID="Ad" Placeholder="Ad" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Ad)"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="AdEn">İng. Ad</label>
                                            <SfTextBox ID="AdEn" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.AdEn)" Enabled="@true"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="KisaAd">Kısa Ad</label>
                                            <SfTextBox ID="KisaAd" CssClass="col-sm-4" @bind-Value="@(fakulteInfo.KisaAd)" Enabled="@true"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="AdEnKisa">İng.Kısa Ad</label>
                                            <SfTextBox ID="AdEnKisa" CssClass="col-sm-4" @bind-Value="@(fakulteInfo.AdEnKisa)" Enabled="@true"></SfTextBox>

                                            <label class="col-sm-2 col-form-label" for="Kod">Kod</label>
                                            <SfTextBox ID="Kod" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Kod)" Enabled="@true"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="EPosta">EPosta</label>
                                            <SfTextBox ID="EPosta" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.EPosta)" Enabled="@true"></SfTextBox>
                                        </div>
                                    </div>



                                    <div class="col-12 pb-2">
                                        <div class="form-row">
                                            <label class="col-sm-2 col-form-label" for="Universite">Universite</label>
                                            <SfDropDownList ID="Universite" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.UniversiteId)" TValue="int?" TItem="UniversiteDto" Index="0" DataSource="universiteDtos">
                                                <DropDownListFieldSettings Value="Id" Text="Ad"></DropDownListFieldSettings>
                                                <DropDownListEvents TValue="int?"></DropDownListEvents>
                                            </SfDropDownList>
                                            <label class="col-sm-2 col-form-label" for="OgrenimTur">Öğrenim Tür</label>
                                            <SfDropDownList ID="OgrenimTur" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.OgrenimTurId)" TValue="int?" TItem="OgrenimTurDto" Index="0" DataSource="ogrenimTurDtos">
                                                <DropDownListFieldSettings Value="Id" Text="Ad"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-row mt-2">
                                    <div class="col-12 pb-2">
                                        <div class="form-row">
                                            <label class="col-sm-2 col-form-label" for="Tel">Tel</label>
                                            <SfTextBox ID="Tel" Placeholder="Tel" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Tel)"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="Adres">Adres</label>
                                            <SfTextBox ID="Adres" Placeholder="Adres" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Adres)"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="Faks">Faks</label>
                                            <SfTextBox ID="Faks" Placeholder="Faks" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Faks)"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="Web">Web</label>
                                            <SfTextBox ID="Web" Placeholder="Web" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.Web)"></SfTextBox>
                                            <label class="col-sm-2 col-form-label" for="Ilçe">IlceId</label>
                                            <SfNumericTextBox ID="IlceId" Placeholder="Ilçe" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.IlceId)"></SfNumericTextBox>
                                            <label class="col-sm-2 col-form-label" for="IlKod">IlKod</label>
                                            <SfNumericTextBox ID="IlKod" Placeholder="IlKod" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.IlKod)"></SfNumericTextBox>
                                            <label class="col-sm-2 col-form-label" for="OgrenimSure">OgrenimSure</label>
                                            <SfNumericTextBox ID="OgrenimSure" Placeholder="OgrenimSure" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.OgrenimSure)"></SfNumericTextBox>
                                            <label class="col-sm-2 col-form-label" for="BirimID">Yöksis Birim</label>
                                            <SfNumericTextBox ID="BirimID" Placeholder="BirimID" CssClass="col-sm-10" @bind-Value="@(fakulteInfo.BirimID)"></SfNumericTextBox>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                    }
                </Template>

            </GridEditSettings>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.Id) HeaderText="Fakülte ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.Ad) HeaderText="Fakülte İsim"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.Kod) HeaderText="Fakülte Kod"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.UniversiteId) HeaderText="Üniversite" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@universiteDtos"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.KisaAd) HeaderText="KisaAd"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.AdEn) HeaderText="AdEn"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.EPosta) HeaderText="EPosta"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.Tel) HeaderText="Tel"></GridColumn>
                <GridColumn Field=@nameof(FakulteDto.OgrenimTurId) HeaderText="Öğrenim Tür" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@ogrenimTurDtos"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.Adres) HeaderText="Adres"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.Faks) HeaderText="Faks"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.Web) HeaderText="Web"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.IlceId) HeaderText="IlceId"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.OgrenimSure) HeaderText="OgrenimSure"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.IlKod) HeaderText="IlKod"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.Tip) HeaderText="Tip"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(FakulteDto.BirimID) HeaderText="Yöksis Birim"></GridColumn>


            </GridColumns>
        </SfGrid>
    </ControlSection>

}



@code{
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "1100px" };

    SfGrid<FakulteDto> FakulteGrid;

    List<FakulteDto> fakulteDtos;// = new List<FakulteDto>();

    List<UniversiteDto> universiteDtos;// = new List<UniversiteDto>();
    List<FakulteTurDto> fakulteTurDtos;// = new List<FakulteTurDto>();
    List<OgrenimTurDto> ogrenimTurDtos;// = new List<OgrenimTurDto>();

    public string[] MenuItems = new string[] { "Group", "Ungroup", "ColumnChooser", "Filter" };

    protected override void OnInitialized()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await ReadUniversites();

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/universite");
        universiteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<UniversiteDto[]>(apiResponse.Result.ToString()).ToList<UniversiteDto>();
        ApiResponseDto apiResponseFakulteTur = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulteTur");
        fakulteTurDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<FakulteTurDto[]>(apiResponseFakulteTur.Result.ToString()).ToList<FakulteTurDto>();
        ApiResponseDto apiResponseOgrenimTur = await Http.GetFromJsonAsync<ApiResponseDto>("api/ogrenimtur");
        ogrenimTurDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<OgrenimTurDto[]>(apiResponseOgrenimTur.Result.ToString()).ToList<OgrenimTurDto>();
    }

    async Task ReadUniversites()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulte");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Fakülteler getirildi");
            fakulteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<FakulteDto[]>(apiResponse.Result.ToString()).ToList<FakulteDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Fakülte bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<FakulteDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(FakulteDto fakulteDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                ("api/fakulte", fakulteDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                //todo = Newtonsoft.Json.JsonConvert.DeserializeObject<FakulteDto>
                //(apiResponse.Result.ToString());
                //todos.Add(todo);
                //todo = new TodoDto(); //reset todo after insert
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                fakulteDtos.Remove(fakulteDto);
                FakulteGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "fakulte Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            fakulteDtos.Remove(fakulteDto);
            FakulteGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Creation Failed");
        }
    }


    public async void Update(FakulteDto fakulteDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/fakulte", fakulteDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Universite Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(FakulteDto fakulteDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/fakulte/" + fakulteDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Universite Deleted", MatToastType.Success);
                fakulteDtos.Remove(fakulteDto);
            }
            else
            {
                matToaster.Add("Universite Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Fakulte Save Failed");
        }
    }


    //[Inject]
    //protected IJSRuntime JsRuntime { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var Locale = await Http.GetJsonAsyncExtension<object>
    //("tr.json");
    //        this.JsRuntime.Sf().LoadLocaleData(Locale).SetCulture("tr");

    //        //this.JsRuntime.Sf().LoadLocaleData("tr.json").SetCulture("tr");
    //    }
    //}
}

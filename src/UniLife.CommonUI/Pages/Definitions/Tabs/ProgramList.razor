@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using System.Net
@using Newtonsoft.Json
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@attribute [Authorize(Roles = "Personel")]

<ControlSection>
    <div class="col-12 pb-2">
        <FakBolPrg ProgramShow="false"
                   @bind-BolumId=@(filterBolumId)
                   @bind-FakulteId=@(filterFakulteId)></FakBolPrg>
    </div>

    <SfGrid @ref="ProgramGrid" Height="400px" DataSource="@programDtos.Where(x=>filterFakulteId==null ? true : x.FakulteId==filterFakulteId).ToList()" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
        <GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>
        @*<GridGroupSettings ShowDropArea="false" Columns="@Initial"></GridGroupSettings>*@
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
        <GridEditSettings Dialog="DialogParams" ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog">
            <Template>
                @{
                    ProgramDto programInfo = (context as ProgramDto);
                }
                <div class="row">

                    <div class="col-sm-4">
                        <div class="form-row mt-2">
                            <div class="col-12 pb-2">
                                <div class="form-row">

                                    <label class="col-sm-2 col-form-label" for="Ad">Ad</label>
                                    <SfTextBox ID="Ad" CssClass=" col-sm-10 pb-1" @bind-Value="@(programInfo.Ad)"></SfTextBox>
                                    <label class="col-sm-2 col-form-label" for="KisaAd">KisaAd</label>
                                    <SfTextBox ID="KisaAd" CssClass=" col-sm-10 pb-1" @bind-Value="@(programInfo.KisaAd)"></SfTextBox>
                                    <label class="col-sm-2 col-form-label" for="AdEn">AdEn</label>
                                    <SfTextBox ID="AdEn" CssClass=" col-sm-10 pb-1" @bind-Value="@(programInfo.AdEn)"></SfTextBox>
                                    <label class="col-sm-2 col-form-label" for="KisaAdEn">KisaAdEn</label>
                                    <SfTextBox ID="KisaAdEn" CssClass=" col-sm-10 pb-1" @bind-Value="@(programInfo.KisaAdEn)"></SfTextBox>
                                    <label class="col-sm-2 col-form-label" for="Kod">Kod</label>
                                    <SfNumericTextBox ID="Kod" CssClass=" col-sm-10" @bind-Value="@(programInfo.Kod)"></SfNumericTextBox>

                                </div>
                            </div>



                            <div class="col-12 pb-2">
                                <FakBolPrg ProgramShow="false"
                                           @bind-BolumId=@(programInfo.BolumId)
                                           @bind-FakulteId=@(programInfo.FakulteId)></FakBolPrg>
                            </div>

                        </div>
                    </div>

                    <div class="col-sm-4">
                        <div class="form-row mt-2">
                            <div class="col-12 pb-2">
                                <div class="form-row">
                                    <label class="col-sm-3 col-form-label" for="AzamiSure">Azami Süre</label>
                                    <SfNumericTextBox ID="AzamiSure" CssClass=" col-sm-9" @bind-Value="@(programInfo.AzamiSure)"></SfNumericTextBox>
                                    <label class="col-sm-3 col-form-label" for="NormalSure">Normal Süre</label>
                                    <SfNumericTextBox ID="NormalSure" CssClass=" col-sm-9" @bind-Value="@(programInfo.NormalSure)"></SfNumericTextBox>
                                    <label class="col-sm-3 col-form-label" for="OsymKod">Ösym Kod</label>
                                    <SfTextBox ID="OsymKod" CssClass=" col-sm-9" @bind-Value="@(programInfo.OsymKod)"></SfTextBox>
                                    <label class="col-sm-3 col-form-label" for="OsymTur">Ösym Tür</label>
                                    <SfTextBox ID="OsymTur" CssClass=" col-sm-9" @bind-Value="@(programInfo.OsymTur)"></SfTextBox>
                                    <label class="col-sm-3 col-form-label" for="YoksisBirimKod">YoksisBirimKod</label>
                                    <SfNumericTextBox ID="YoksisBirimKod" CssClass=" col-sm-3" @bind-Value="@(programInfo.YoksisBirimKod)"></SfNumericTextBox>
                                    <SfCheckBox Label="Yöksis Durum" CssClass="col-sm-6" @bind-Checked="@(programInfo.YoksisDurum)"></SfCheckBox>
                                    <SfDropDownList @ref="DropProgramTur" TValue="int?" TItem="ProgramTurDto" Placeholder="Program Türü seçiniz..."
                                                    Query="@programTurQuery"
                                                    @bind-Value="@programInfo.ProgramTurId">
                                        <SfDataManager Url="odata/programturs" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-row mt-2">
                            <div class="col-12 pb-2">
                                <div class="form-row">
                                    <label class="col-sm-3 col-form-label" for="MezuniyetUnvan">Mezuniyet Ünvan</label>
                                    <SfTextBox ID="MezuniyetUnvan" CssClass=" col-sm-9" @bind-Value="@(programInfo.MezuniyetUnvan)"></SfTextBox>
                                    <label class="col-sm-3 col-form-label" for="DiplomaAd">Diploma Adı</label>
                                    <SfTextBox ID="DiplomaAd" CssClass=" col-sm-9" @bind-Value="@(programInfo.DiplomaAd)"></SfTextBox>
                                    <label class="col-sm-3 col-form-label" for="DiplomaAdEn">Diploma AdEn</label>
                                    <SfTextBox ID="DiplomaAdEn" CssClass=" col-sm-9" @bind-Value="@(programInfo.DiplomaAdEn)"></SfTextBox>
                                    <label class="col-sm-3 col-form-label" for="dil">Dil</label>
                                    <SfDropDownList ID="dil" TValue="int" TItem="DersDilDto" Index="0" CssClass="col-sm-9"
                                                    @bind-Value="@programInfo.Dil">
                                        <SfDataManager Url="odata/dersdils" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                        <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <label class="col-sm-3 col-form-label" for="Yerleske">Yerleşke</label>
                                    <SfTextBox ID="Yerleske" CssClass=" col-sm-9" @bind-Value="@(programInfo.Yerleske)"></SfTextBox>
                                    <SfCheckBox Label="Hazırlık" CssClass="col-sm-3" @bind-Checked="@(programInfo.IsHazirlik)"></SfCheckBox>
                                    <SfCheckBox Label="Staj" CssClass="col-sm-3" @bind-Checked="@(programInfo.StajDurum)"></SfCheckBox>
                                    <SfCheckBox Label="Durum" CssClass="col-sm-3" @bind-Checked="@(programInfo.Durum)"></SfCheckBox>
                                    <SfCheckBox Label="Yillik" CssClass="col-sm-3" @bind-Checked="@(programInfo.Yillik)"></SfCheckBox>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </Template>
        </GridEditSettings>
        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.Id) HeaderText="Program ID" AllowAdding="false" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
            <GridColumn Field=@nameof(ProgramDto.Ad) HeaderText="Program İsim" ValidationRules="@(new ValidationRules{ Required=true})" Width="170"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.AdEn) HeaderText="İng Ad"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.KisaAd) HeaderText="Kısa Ad"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.KisaAdEn) HeaderText="İng. K.Ad"></GridColumn>
            <GridColumn Field=@nameof(ProgramDto.Kod) HeaderText="Kod"></GridColumn>
            @*<GridColumn Field=@nameof(ProgramDto.FakulteId) HeaderText="Fakülte" EditType="EditType.DropDownEdit" ForeignKeyValue="Ad" ForeignKeyField="Id" Width="150" DataSource="@fakulteDtos"></GridColumn>
                <GridColumn Field=@nameof(ProgramDto.BolumId) HeaderText="Bölüm" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@bolumDtos" Width="150"></GridColumn>*@
            <GridColumn Field=@nameof(ProgramDto.NormalSure) HeaderText="Normal Süre" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.AzamiSure) HeaderText="AzamiSure"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.OsymKod) HeaderText="ösym Kod"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.OsymTur) HeaderText="ösym Tür TODO"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.YoksisBirimKod) HeaderText="YoksisBirimKod"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.MezuniyetUnvan) HeaderText="MezuniyetUnvan"></GridColumn>
            @*Program turu , öğrenim turu atladım todo*@
            <GridColumn Visible="false" Field=@nameof(ProgramDto.ProgramTurId) HeaderText="ProgramTurId"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.IsHazirlik) DisplayAsCheckBox="true" HeaderText="Hazırlık"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.StajDurum) DisplayAsCheckBox="true" HeaderText="Staj"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.Durum) DisplayAsCheckBox="true" HeaderText="Aktif"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.DiplomaAd) HeaderText="DiplomaAd"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.DiplomaAdEn) HeaderText="DiplomaAd İng."></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.Dil) HeaderText="Dil"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.Yillik) DisplayAsCheckBox="true" HeaderText="Yillik"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.Yerleske) HeaderText="Yerleske"></GridColumn>
            <GridColumn Visible="false" Field=@nameof(ProgramDto.YoksisDurum) DisplayAsCheckBox="true" HeaderText="YoksisDurum"></GridColumn>
        </GridColumns>
    </SfGrid>
</ControlSection>

<SfButton OnClick="asdf" Content="asdf"></SfButton>

@code{

    string[] Initial = (new string[] { "FakulteId", "BolumId" });
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "1400px" };

    SfGrid<ProgramDto> ProgramGrid;

    List<ProgramDto> programDtos = new List<ProgramDto>();

    //List<BolumDto> bolumDtos = new List<BolumDto>();
    //List<FakulteDto> fakulteDtos = new List<FakulteDto>();

    public int? filterBolumId { get; set; }
    public int? filterFakulteId { get; set; }

    SfDropDownList<int?, ProgramTurDto> DropProgramTur;
    public Query programTurQuery = new Query().Select(new List<string> { "Id", "Ad" }).RequiresCount();

    protected override void OnInitialized()
    {
        ReadPrograms();

        //ApiResponseDto apiResponse = Http.GetFromJsonAsync<ApiResponseDto>("api/bolum").Result;
        //bolumDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<BolumDto[]>(apiResponse.Result.ToString()).ToList<BolumDto>();

        //ApiResponseDto<List<FakulteDto>> apiResponseFakulte = Http.GetFromJsonAsync<ApiResponseDto<List<FakulteDto>>>("api/fakulte").Result;
        //fakulteDtos = apiResponseFakulte.Result;

    }

    void ReadPrograms()
    {

        ApiResponseDto apiResponse = Http.GetFromJsonAsync<ApiResponseDto>("api/program").Result;

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Programler getirildi");
            programDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto[]>(apiResponse.Result.ToString()).ToList<ProgramDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program bilgisi getirilirken hata oluştu!");
        }
    }


    public void ActionCompletedHandler(ActionEventArgs<ProgramDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(ProgramDto programDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                ("api/program", programDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                programDtos.Add(programDto);
                ReadPrograms();
                StateHasChanged();
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                programDtos.Remove(programDto);
                ProgramGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            programDtos.Remove(programDto);
            ProgramGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Program Creation Failed");
        }
    }


    public async void Update(ProgramDto programDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/program", programDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program Save Failed");
                //update failed gridi boz !
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Program Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(ProgramDto programDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/program/" + programDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Program Deleted", MatToastType.Success);
                programDtos.Remove(programDto);
            }
            else
            {
                matToaster.Add("Program Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
        }
    }

    public async Task asdf()
    {
        StateHasChanged();
    }

}

<style>
    .form-group {
        margin-bottom: unset;
    }
</style>
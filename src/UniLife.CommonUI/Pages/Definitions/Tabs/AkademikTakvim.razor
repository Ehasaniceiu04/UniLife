@page "/akademikTakvim"
@*@page "/akademikTakvim/{donemId:int}/{fakulteId:int}"*@

@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using System.Net
@using Newtonsoft.Json
@inject AppState appState

<AuthorizeView Roles="Admin,Personel" Context="AuthorizeContext">
    <Authorized>
        <SfDropDownList ID="DropDonem" @ref="DropDonem" ShowClearButton="true" TItem="DonemDto"
                        TValue="int?" PopupHeight="230px" Placeholder="Dönem Seçiniz"
                        @bind-Value="@donemId" DataSource="@donemDtos.OrderByDescending(x=>x.Durum).ThenBy(x=>x.Yil)">
            <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
            <DropDownListEvents TValue="int?" ValueChange="DonemChange"></DropDownListEvents>
        </SfDropDownList>

        <SfDropDownList ID="DropFakulte" @ref="DropFakulte" ShowClearButton="true" TItem="KeyValueDto" CssClass="col-sm-10"
                        TValue="int?" PopupHeight="230px" Placeholder="Fakülte Seçiniz"
                        @bind-Value="@fakulteId" DataSource="@fakulteDtos">
            <DropDownListEvents TValue="int?" ValueChange="FakChange"></DropDownListEvents>
            <DropDownListFieldSettings Text="Ad" Value="Id"></DropDownListFieldSettings>
        </SfDropDownList>
    </Authorized>
</AuthorizeView>



<Syncfusion.Blazor.Buttons.SfButton OnClick="Getir" CssClass="e-success col-sm-1">Yenile</Syncfusion.Blazor.Buttons.SfButton>

@if (akademikTakvimDtos == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Takvim Yükleniyor.</label>
    </LoadingBackground>
}
else
{
    <ControlSection>
        <SfGrid @ref="AkademikTakvimGrid" AllowResizing="true" DataSource="@akademikTakvimDtos.OrderBy(x=>x.Kod).ToList()" Toolbar="@(new List<string>() {"Add","Edit","Update", "Cancel" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
            <GridEvents OnActionComplete="ActionCompletedHandler" CommandClicked="CommandClickHandler" TValue="AkademikTakvimDto"></GridEvents>
            <GridEditSettings AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(AkademikTakvimDto.Id) HeaderText="ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                <GridColumn Visible="false" Field=@nameof(AkademikTakvimDto.Kod)></GridColumn>
                <GridColumn Field=@nameof(AkademikTakvimDto.Ad) HeaderText="AkademikTakvim İsim" AllowEditing="false" ValidationRules="@(new ValidationRules{ Required=true})" Width="170"></GridColumn>
                <GridColumn Field=@nameof(AkademikTakvimDto.BasTarih) HeaderText="Başlangıç Tarihi"></GridColumn>
                <GridColumn Field=@nameof(AkademikTakvimDto.BitTarih) HeaderText="Bitiş Tarihi"></GridColumn>
                <GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Tüm Fakülteler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat", Content="Tüm Fakülteler" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </ControlSection>
}

<AuthorizeView Roles="Admin,Personel" Context="AuthorizeContext">
    <Authorized>
        @if (uyarıDialogOpen)
        {
            <Dialog Baslik="Uyarı" @bind-isDialogOpen="@uyarıDialogOpen">
                @foreach (var item in dialogTexts)
                {
                    <p>@item</p>
                }
            </Dialog>
        }

    </Authorized>
</AuthorizeView>

@code{
    bool uyarıDialogOpen;
    List<string> dialogTexts = new List<string>();

    [Parameter]
    public int? donemId { get; set; }
    [Parameter]
    public int? fakulteId { get; set; }
    //int? donemId;
    //int? fakulteId;

    SfDropDownList<int?, DonemDto> DropDonem;
    SfGrid<AkademikTakvimDto> AkademikTakvimGrid;
    SfDropDownList<int?, KeyValueDto> DropFakulte;


    List<AkademikTakvimDto> akademikTakvimDtos = new List<AkademikTakvimDto>();

    List<KeyValueDto> fakulteDtos = new List<KeyValueDto>();
    List<DonemDto> donemDtos = new List<DonemDto>();


    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal user;
    //protected override async Task OnParametersSetAsync()
    //{

    //}

    protected override async Task OnInitializedAsync()
    {
        user = (await authenticationStateTask).User;

        if (user.IsInRole(UserRoles.Personel.ToString()) || user.IsInRole(UserRoles.Administrator.ToString()))
        {
            ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulte");
            fakulteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValueDto[]>(apiResponse.Result.ToString()).ToList<KeyValueDto>();
            ApiResponseDto apiResponseDonem = await Http.GetFromJsonAsync<ApiResponseDto>("api/Donem");
            donemDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<DonemDto[]>(apiResponseDonem.Result.ToString()).ToList<DonemDto>();
        }
        else if (user.IsInRole(UserRoles.Ogrenci.ToString()))
        {
            fakulteId = (await appState.GetOgrenciState()).FakulteId;
            donemId = (await appState.GetDonemState()).Id;
        }
    }

    async Task ReadAkademikTakvims()
    {

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>($"api/akademikTakvim/GetAkaTakByFakIdDonId/{fakulteId ?? fakulteDtos.FirstOrDefault().Id}/{donemId ?? donemDtos.FirstOrDefault(x => x.Durum == true).Id}");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "AkademikTakvimler getirildi");
            akademikTakvimDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<AkademikTakvimDto[]>(apiResponse.Result.ToString()).ToList<AkademikTakvimDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "AkademikTakvim bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<AkademikTakvimDto> args)
    {
        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        //{

        //}
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(AkademikTakvimDto akademikTakvimDto)
    {
        try
        {
            akademikTakvimDto.FakulteId = fakulteId;
            akademikTakvimDto.DonemId = donemId;
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/akademikTakvim", akademikTakvimDto);
            if (apiResponse.IsSuccessStatusCode)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                akademikTakvimDtos.Remove(akademikTakvimDto);
                AkademikTakvimGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "AkademikTakvim Creation Failed");
            }
        }
        catch (Exception ex)
        {
            akademikTakvimDtos.Remove(akademikTakvimDto);
            AkademikTakvimGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "AkademikTakvim Creation Failed");
        }
    }


    public async void Update(AkademikTakvimDto akademikTakvimDto)
    {
        //this updates the IsCompleted flag only
        try
        {

            ApiResponseDto apiResponse;
            if (akademikTakvimDto.FakulteId == null)
            {
                akademikTakvimDto.FakulteId = fakulteId;
                akademikTakvimDto.DonemId = donemId;
                akademikTakvimDto.Id = 0;
                apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/akademikTakvim", akademikTakvimDto);
            }
            else
            {
                akademikTakvimDto.FakulteId = fakulteId;
                akademikTakvimDto.DonemId = donemId;
                apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/akademikTakvim", akademikTakvimDto);
            }


            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "AkademikTakvim Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "AkademikTakvim Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(AkademikTakvimDto akademikTakvimDto)
    {
        //try
        //{
        //    var response = await Http.DeleteAsync("api/akademikTakvim/" + akademikTakvimDto.Id);
        //    if (response.StatusCode == (HttpStatusCode)Status200OK)
        //    {
        //        matToaster.Add("AkademikTakvim Deleted", MatToastType.Success);
        //        akademikTakvimDtos.Remove(akademikTakvimDto);
        //    }
        //    else
        //    {
        //        matToaster.Add("AkademikTakvim Delete Failed: " + response.StatusCode, MatToastType.Danger);
        //    }
        //    //deleteDialogOpen = false;
        //}
        //catch (Exception ex)
        //{
        //    matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
        //}
    }

    private void DonemChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        //ReadAkademikTakvims();
        //AkademikTakvimGrid.Refresh();
    }
    private void FakChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        //ReadAkademikTakvims();
        //AkademikTakvimGrid.Refresh();
    }

    public async Task CommandClickHandler(Syncfusion.Blazor.Grids.CommandClickEventArgs<AkademikTakvimDto> args)
    {
        if (args.CommandColumn.Title == "Tüm Fakülteler")
        {
            try
            {
                //ApiResponseDto apiResponse =await Http.GetFromJsonAsync<ApiResponseDto>($"api/akademikTakvim/SetDatesToAllFaksForKod/{args.RowData.BasTarih}/{args.RowData.BitTarih}/{args.RowData.Kod}");
                ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/akademikTakvim/PostChangeAllFakultesTakvim", args.RowData);
                if (apiResponse.IsSuccessStatusCode)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success, "İşlem başarılı.");
                }
                else
                    matToaster.Add(apiResponse.Message, MatToastType.Danger, "Hata oluştu!");
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.GetBaseException().Message, MatToastType.Danger, "Hata oluştu!");
            }


        }

    }

    public async Task Getir()
    {
        if (!donemId.HasValue || !fakulteId.HasValue)
        {
            dialogTexts.Add("Dönem ve Fakülte bilgilerini giriniz.");
            uyarıDialogOpen = true;
        }
        else
        {
            await ReadAkademikTakvims();
            AkademikTakvimGrid.Refresh();
        }

    }




}

<style>
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #3ec9e8;
    }
</style>

@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using System.Net
@using Newtonsoft.Json
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@attribute [Authorize(Roles = "Administrator,Personel")]

<ControlSection>
    <SfGrid AllowResizing="true" @ref="BolumGrid" DataSource="@bolumDtos" Toolbar="@(new List<string>() { "Add"})" AllowSorting="true" AllowFiltering="true" AllowPaging="true" Width="100%">
        <GridEvents OnActionComplete="ActionCompletedHandler" OnActionBegin="OnActionBeginHandler" TValue="BolumDto"></GridEvents>
        <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(BolumDto.Id) HeaderText="Bölüm ID" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.FakulteId) HeaderText="Fakülte" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@fakulteDtos"></GridColumn>
            <GridColumn AutoFit="true" Field=@nameof(BolumDto.Ad) HeaderText="Bölüm İsim"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.KisaAd) HeaderText="KisaAd"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.Kod) HeaderText="Kod"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.AdEn) HeaderText="AdEn"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.KisaAdEn) HeaderText="İng. K.Ad"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.OsymKod) HeaderText="OsymKod"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.OgrenimTurId) HeaderText="Ogrenim Tür" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@ogrenimTurDtos"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.OgrenimSure) HeaderText="OgrenimSure"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.Durum) EditType="EditType.BooleanEdit" HeaderText="Aktif"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.DiplomaAd) HeaderText="DiplomaAd"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.IsBologna) EditType="EditType.BooleanEdit" HeaderText="IsBologna"></GridColumn>
            <GridColumn Field=@nameof(BolumDto.DiplomaAdEn) HeaderText="DiplomaAdEn"></GridColumn>
            <GridColumn Width="100">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</ControlSection>

@code{

    SfGrid<BolumDto> BolumGrid;

    List<BolumDto> bolumDtos;// = new List<BolumDto>();

    List<KeyValueDto> fakulteDtos;//= new List<KeyValueDto>();
    List<KeyValueDto> ogrenimTurDtos;// = new List<KeyValueDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReadBolums();

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulte");
        fakulteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValueDto[]>(apiResponse.Result.ToString()).ToList<KeyValueDto>();
        ApiResponseDto apiResponseOgrTur = await Http.GetFromJsonAsync<ApiResponseDto>("api/ogrenimtur");
        ogrenimTurDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValueDto[]>(apiResponseOgrTur.Result.ToString()).ToList<KeyValueDto>();

    }

    async Task ReadBolums()
    {

        ApiResponseDto<List<BolumDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<BolumDto>>>("api/bolum");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Bölümler getirildi");
            bolumDtos = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm bilgisi getirilirken hata oluştu!");
        }
    }


    public async Task OnActionBeginHandler(ActionEventArgs<BolumDto> args)
    {

        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        //{
        //    await BolumGrid.ShowColumns("DiplomaAdEn");
        //}
    }

    public async Task ActionCompletedHandler(ActionEventArgs<BolumDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                await Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                await Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await Delete(args.Data);
        }


        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            await BolumGrid.ShowColumns(new string[] { "DiplomaAdEn", "AdEn", "OsymKod", "DiplomaAd", "DiplomaAdEn", "IsBologna" });
        }

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save || 
            args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel ||
            args.RequestType == Syncfusion.Blazor.Grids.Action.Refresh)
        {
            await BolumGrid.HideColumns(new string[] { "DiplomaAdEn", "AdEn", "OsymKod", "DiplomaAd", "DiplomaAdEn", "IsBologna" });
        }
    }




    public async Task Create(BolumDto bolumDto)
    {
        try
        {
            ApiResponseDto<BolumDto> apiResponse = await Http.PostJsonAsync<ApiResponseDto<BolumDto>>
                ("api/bolum", bolumDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                bolumDtos.FirstOrDefault(x => x.Id == 0).Id = apiResponse.Result.Id;
                BolumGrid.Refresh();
            }
            else
            {
                bolumDtos.Remove(bolumDto);
                BolumGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm Creation Failed");
            }
        }
        catch (Exception ex)
        {
            bolumDtos.Remove(bolumDto);
            BolumGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Creation Failed");
        }
    }

    public async Task Update(BolumDto bolumDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/bolum", bolumDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(BolumDto bolumDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/bolum/" + bolumDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Bölüm Deleted", MatToastType.Success);
                bolumDtos.Remove(bolumDto);
            }
            else
            {
                matToaster.Add("Bölüm Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Save Failed");
        }
    }

}

<style type="text/css" class="cssStyles">
    .e-grid .e-altrow {
        background-color: #fafafa;
    }
</style>

@inject HttpClient Http;
@using UniLife.Shared.Dto.Definitions
@inject IMatToaster matToaster

@using System.Net

<ControlSection>
    <SfGrid Width="100%" Height="85%" AllowResizing="true" @ref="UniGrid" DataSource="@kayitNedenDtos" Toolbar="@(new List<string>() { "Add" })" AllowPaging="true" AllowFiltering="true">
        <GridEvents OnActionComplete="ActionCompletedHandler" TValue="KayitNedenDto"></GridEvents>
        <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridColumns>
            <GridColumn Visible="false" Field=@nameof(KayitNedenDto.Id) AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.Ad) HeaderText="Kayit Neden" Width="170"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.Kod) HeaderText="Kod"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.YoksisKod) HeaderText="YoksisKod"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.YoksisStatusKod) HeaderText="YoksisStatusKod"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.KisaAd) HeaderText="KisaAd"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.AdEn) HeaderText="AdEn"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.KisaAdEn) HeaderText="KisaAdEn"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.YuzdeOn) DisplayAsCheckBox="true" HeaderText="YuzdeOn"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.DersKayitKuralDisi) DisplayAsCheckBox="true" HeaderText="DersKayitKuralDisi"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.OzelOgr) DisplayAsCheckBox="true" HeaderText="OzelOgr"></GridColumn>
            <GridColumn Field=@nameof(KayitNedenDto.HarcTahakkukEtmez) DisplayAsCheckBox="true" HeaderText="HarcTahakkukEtmez"></GridColumn>
            <GridColumn>
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</ControlSection>

<style type="text/css" class="cssStyles">
    .e-grid .e-altrow {
        background-color: #fafafa;
    }
</style>


@code{

    SfGrid<KayitNedenDto> UniGrid;

    List<KayitNedenDto> kayitNedenDtos = new List<KayitNedenDto>();

    protected override void OnInitialized()
    {
        ReadKayitNedens();
    }

    void ReadKayitNedens()
    {
        ApiResponseDto<List<KayitNedenDto>> apiResponse = Http.GetFromJsonAsync<ApiResponseDto<List<KayitNedenDto>>>("api/KeyValues/GetKayitNeden").Result;

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Kayit Neden getirildi");
            kayitNedenDtos = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Kayit Neden bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<KayitNedenDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "Edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "Add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(KayitNedenDto kayitNedenDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/KeyValues/PostKayitNeden", kayitNedenDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                //todo = Newtonsoft.Json.JsonConvert.DeserializeObject<KayitNedenDto>(apiResponse.Result.ToString());
                //todos.Add(todo);
                //todo = new TodoDto(); //reset todo after insert
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                kayitNedenDtos.Remove(kayitNedenDto);
                UniGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "kayitNeden Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            kayitNedenDtos.Remove(kayitNedenDto);
            UniGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "KayitNeden Creation Failed");
        }
    }


    public async void Update(KayitNedenDto kayitNedenDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/KeyValues/PutKayitNeden", kayitNedenDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "KayitNeden Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "KayitNeden Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(KayitNedenDto kayitNedenDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/KeyValues/DeleteKayitNeden" + kayitNedenDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("KayitNeden Deleted", MatToastType.Success);
                kayitNedenDtos.Remove(kayitNedenDto);
            }
            else
            {
                matToaster.Add("KayitNeden Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "KayitNeden Save Failed");
        }
    }


    //[Inject]
    //protected IJSRuntime JsRuntime { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        var Locale = await Http.GetJsonAsyncExtension<object>("tr.json");
    //        this.JsRuntime.Sf().LoadLocaleData(Locale).SetCulture("tr");

    //        //this.JsRuntime.Sf().LoadLocaleData("tr.json").SetCulture("tr");
    //    }
    //}
}
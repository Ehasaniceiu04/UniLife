@inject HttpClient Http;
@using Semerkand.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using System.Net
@using Newtonsoft.Json

    <ControlSection>
        <SfGrid @ref="ProgramGrid" DataSource="@programDtos" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
            <GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>
            <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(ProgramDto.Id) HeaderText="Program ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                <GridColumn Field=@nameof(ProgramDto.Isim) HeaderText="Program İsim" ValidationRules="@(new { required=true})" Width="170"></GridColumn>
                @*<GridColumn Field=@nameof(ProgramDto.Fakulte.UniversiteId) HeaderText="Üniversite" ForeignKeyValue="Isim" ForeignKeyField="Id" DataSource="@universiteDtos" Width="150"></GridColumn>*@
                <GridColumn Field=@nameof(ProgramDto.BolumId) HeaderText="Bölüm" ForeignKeyValue="Isim" ForeignKeyField="Id" DataSource="@bolumDtos" Width="150"></GridColumn>

            </GridColumns>
        </SfGrid>
    </ControlSection>
            


@code{

    SfGrid<ProgramDto> ProgramGrid;

    List<ProgramDto> programDtos = new List<ProgramDto>();

    List<BolumDto> bolumDtos = new List<BolumDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReadPrograms();

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/bolum");
        bolumDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<BolumDto[]>(apiResponse.Result.ToString()).ToList<BolumDto>();

    }

    async Task ReadPrograms()
    {

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/program");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Programler getirildi");
            programDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto[]>(apiResponse.Result.ToString()).ToList<ProgramDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<ProgramDto>
        args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(ProgramDto programDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                ("api/program", programDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                //todo = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto>
                //(apiResponse.Result.ToString());
                //todos.Add(todo);
                //todo = new TodoDto(); //reset todo after insert
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                programDtos.Remove(programDto);
                ProgramGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            programDtos.Remove(programDto);
            ProgramGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Program Creation Failed");
        }
    }


    public async void Update(ProgramDto programDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/program", programDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Program Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Program Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(ProgramDto programDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/program/" + programDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Program Deleted", MatToastType.Success);
                programDtos.Remove(programDto);
            }
            else
            {
                matToaster.Add("Program Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
        }
    }

}

@inject HttpClient Http;
@using Semerkand.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using System.Net
@using Newtonsoft.Json

    <ControlSection>
        <SfGrid @ref="BolumGrid" DataSource="@bolumDtos" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
            <GridEvents OnActionComplete="ActionCompletedHandler" TValue="BolumDto"></GridEvents>
            <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(BolumDto.Id) HeaderText="Bölüm ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                <GridColumn Field=@nameof(BolumDto.Ad) HeaderText="Bölüm İsim" ValidationRules="@(new { required=true})" Width="170"></GridColumn>
                @*<GridColumn Field=@nameof(BolumDto.Fakulte.UniversiteId) HeaderText="Üniversite" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@universiteDtos" Width="150"></GridColumn>*@
                <GridColumn Field=@nameof(BolumDto.FakulteId) HeaderText="Fakülte" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@fakulteDtos" Width="150"></GridColumn>

            </GridColumns>
        </SfGrid>
    </ControlSection>
            
@code{

    SfGrid<BolumDto> BolumGrid;

    List<BolumDto> bolumDtos = new List<BolumDto>();

    List<FakulteDto> fakulteDtos = new List<FakulteDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReadBolums();

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulte");
        fakulteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<FakulteDto[]>(apiResponse.Result.ToString()).ToList<FakulteDto>();

    }

    async Task ReadBolums()
    {

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/bolum");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Bölümler getirildi");
            bolumDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<BolumDto[]>(apiResponse.Result.ToString()).ToList<BolumDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<BolumDto>
        args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(BolumDto bolumDto)
    {
        try
        {
            ApiResponseDto<BolumDto> apiResponse = await Http.PostJsonAsync<ApiResponseDto<BolumDto>>
                ("api/bolum", bolumDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                bolumDtos.FirstOrDefault(x => x.Id == 0).Id = apiResponse.Result.Id;
                BolumGrid.Refresh();
            }
            else
            {
                bolumDtos.Remove(bolumDto);
                BolumGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm Creation Failed");
            }
        }
        catch (Exception ex)
        {
            bolumDtos.Remove(bolumDto);
            BolumGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Creation Failed");
        }
    }

    public async void Update(BolumDto bolumDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/bolum", bolumDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(BolumDto bolumDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/bolum/" + bolumDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Bölüm Deleted", MatToastType.Success);
                bolumDtos.Remove(bolumDto);
            }
            else
            {
                matToaster.Add("Bölüm Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Bölüm Save Failed");
        }
    }

}

@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject HttpClient Http
@inject IMatToaster matToaster
@using Newtonsoft.Json
@using Semerkand.Shared.Dto.Definitions
@using Semerkand.CommonUI.Pages.Admin.OgrenciIslem.OgrenciIslemTabs.OgrencilerTabs
@using Syncfusion.Blazor.SplitButtons
@using System.Reflection;
@inject AppState appState



<ControlSection>
    <div class="row">
        <SfGrid ID="OgrGrid" @ref="OgrGrid" AllowSorting="true" AllowFiltering="true" AllowPaging="true" DataSource="@OgrGridDtos">
            @*OnActionFailure="ActionFailureHandler"  OnActionBegin="ActionBeginHandler" DetailDataBound="DetailDataBound" RowDataBound="RowBound"*@
            <GridEvents TValue="OgrenciDto" CommandClicked="CommandClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompletedHandler"></GridEvents>
            <GridTemplates>
                <DetailTemplate>
                    @{
                        var ogrenciDto = (context as Semerkand.Shared.Dto.Definitions.OgrenciDto);

                        //SampleChart için
                        var chartQuery = $"new sf.data.Query().where('EmployeeID', 'equal', {ogrenciDto.Id}, false)";

                    }
                    <div style="padding:20px">
                        <SfTab LoadOn="ContentLoad.Dynamic">
                            <TabItems>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Details"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <OgrenciBilgi _OgrenciDto="ogrenciDto.DeepClone()"></OgrenciBilgi>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Roles"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                        <OgrenciRoles _OgrenciDto="ogrenciDto"></OgrenciRoles>
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <ChildContent>
                                        <TabHeader Text="Report"></TabHeader>
                                    </ChildContent>
                                    <ContentTemplate>
                                    </ContentTemplate>
                                </TabItem>
                            </TabItems>
                        </SfTab>
                    </div>
                </DetailTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn Visible="false" Field=@nameof(OgrenciDto.ApplicationUserId) HeaderText="AppUserId" AllowEditing="false" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                <GridColumn Field=@nameof(OgrenciDto.Ad) HeaderText="Ad"> </GridColumn>
                <GridColumn Field=@nameof(OgrenciDto.Soyad) HeaderText="Soyad"></GridColumn>
                <GridColumn Field=@nameof(OgrenciDto.TCKN) HeaderText="TCKN"></GridColumn>
                <GridColumn Field=@nameof(OgrenciDto.OgrNo) HeaderText="Öğrenci No"></GridColumn>
                <GridColumn>
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.None" Title="Akademik Bilgiler" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div class="row">
        <div class="col-12 text-right">
            <SfProgressButton OnClick="AddNew" Content="Yeni Öğrenci Kaydı >" CssClass="center-block e-primary">
                <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
            </SfProgressButton>
        </div>
    </div>


</ControlSection>

@code{


    public SfGrid<OgrenciDto> OgrGrid;


    List<OgrenciDto> OgrGridDtos = new List<OgrenciDto>();

    public OgrenciDto _OgrenciDto { get; set; } = new OgrenciDto();

    protected override async Task OnInitializedAsync()
    {
        await ReadOgrencis();
    }

    async Task ReadOgrencis()
    {
        //ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>($"api/Admin/GetOgrenciUsers?pageSize={10}&pageNumber={0}");
        ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>("api/ogrenci");


        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Öğrenciler getirildi");
            OgrGridDtos = apiResponse.Result;
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Öğrenci bilgisi getirilirken hata oluştu!");
        }
    }



    public async void ActionCompletedHandler(ActionEventArgs<OgrenciDto> args)
    {
        var FilterApplied = OgrGrid.FilterSettings.Columns; // to get filtered column details
                                                            //var GroupingApplied = OgrGrid.GroupSettings.Columns; // to get grouped column details
                                                            //var SortingApplied = OgrGrid.SortSettings.Columns; // to get sorted column details
                                                            //var Columns = await OgrGrid.GetColumns(); // to get columsn details like visibility and other properties

        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Filtering)
        //{
        //    await ProceedFilter(FilterApplied);
        //}
    }

    //async Task ProceedFilter(List<GridFilterColumn> filtreler)
    //{
    //    string query = "?";
    //    foreach (var item in filtreler)
    //    {
    //        query += item.Field + "=" + item.Value.ToString();
    //    }

    //    ApiResponseDto<List<OgrenciDto>> apiResponse = await Http.GetFromJsonAsync<ApiResponseDto<List<OgrenciDto>>>("api/ogrenci/GetOgrenciQuery" + query);

    //}



    //public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    //{
    //}


    public void ActionBeginHandler(ActionEventArgs<OgrenciDto> args)
    {

    }



    //public void RowBound(RowDataBoundEventArgs<OgrenciDto> args)
    //{
    //    //Elementin non-public / nonpublic elemanını alıyoruz.
    //    //PropertyInfo pInfo = args.Row.GetType().GetProperty("ClassList",
    //    //   System.Reflection.BindingFlags.Public |
    //    //   System.Reflection.BindingFlags.NonPublic |
    //    //   System.Reflection.BindingFlags.Instance);

    //    //List<string> ClassList = (List<string>)pInfo.GetValue(args.Row, null);

    //    //if (ClassList.Count < 2)
    //    //{
    //    //    this.OgrGrid.DetailCollapseAll();
    //    //}


    //    //if (args.Data.Freight < 25)
    //    //{
    //    //    args.Row.AddClass(new string[] { "below-25" });
    //    //}
    //    //else if (args.Data.Freight < 35)
    //    //{
    //    //    args.Row.AddClass(new string[] { "below-35" });
    //    //}
    //    //else
    //    //{
    //    //    args.Row.AddClass(new string[] { "above-35" });
    //    //}
    //}

    [Parameter]
    public EventCallback<OgrenciDto> OgrenciToAkademik { get; set; }

    public void CommandClickHandler(CommandClickEventArgs<OgrenciDto> args)
    {
        if (args.CommandColumn.Title == "Akademik Bilgiler")
        {
            _OgrenciDto = args.RowData;
            appState.OgrenciState = _OgrenciDto;
            OgrenciToAkademik.InvokeAsync(_OgrenciDto);

        }
    }


    async Task AddNew()
    {
        await OgrenciToAkademik.InvokeAsync(new OgrenciDto());
    }
}



<style type="text/css" class="cssStyles">
    .photo {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0,0,0,0.2);
    }

    .title {
        font-size: medium;
        font-weight: 400;
    }

    .content {
        font-size: medium;
        color: #6c757d
    }

    .e-tab .e-content {
        overflow-y: hidden;
    }

    .e-tab .e-tab-header {
        border: 0;
    }

    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #e83e8c;
    }
</style>
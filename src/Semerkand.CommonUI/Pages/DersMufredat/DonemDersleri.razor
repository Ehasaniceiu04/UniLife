@page "/donemdersleri"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Semerkand.Shared.Dto.Definitions
@inject HttpClient Http;
@inject IMatToaster matToaster

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@*@using System.ComponentModel.DataAnnotations;*@
<style>
    textarea.e-input,
    .e-float-input textarea,
    .e-float-input.e-control-wrapper textarea,
    .e-input-group textarea,
    .e-input-group.e-control-wrapper textarea {
        resize: none;
    }
</style>




@*<InputText id="name" @bind-Value="_employee.Name" />
    <button >Submit</button>*@



<div class="row">
    <div class="col-sm-12 col-md-6">
        <div class="row">
            <div class="col-sm-12 text-center">
                <p>Müfredat Dersleri</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6">
                <div class="form-row">
                    @*@bind-Value="forvalidation.seciliFakulteler"*@
                    <SfMultiSelect @ref="CokluFakulte" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Fakulteleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@fakulteDtos" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Fakulteleri Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="FakulteToBolum"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfMultiSelect @ref="CokluBolum" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Bölümleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@bolumDtos" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Bölümleri Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="BolumToProgram"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfMultiSelect @ref="CokluProgram" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Programları Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@programDtos" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Programları Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="ProgramToMufredat"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
            </div>
            <div class="col-sm-12 col-md-6">
                <div class="form-row">
                    <SfMultiSelect @ref="CokluDonem" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Dönemleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@donemDtos" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Dönemleri Seçiniz" PopupHeight="350px">
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfMultiSelect @ref="CokluSinif" TValue="int[]" CssClass="e-small col-sm-12" Placeholder="Sınıfları Seçiniz" Mode="@VisualMode.CheckBox" DataSource="@sinifDtos" ShowSelectAll="true" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Sınıfları Seçiniz" PopupHeight="350px">
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfCheckBox @ref="isIntibak" Label="İntibakı Yapılmayanlar" CssClass="e-small col-sm-6" Value="true"></SfCheckBox>
                    <SfCheckBox @ref="isActive" Label="Sadece Aktifler" CssClass="e-small col-sm-6" Value="true"></SfCheckBox>
                </div>
            </div>
            <div class="col-12 pb-1">
                <div class="form-row">
                    <SfMultiSelect @ref="CokluMufredat" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Müfredatları Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@mufredatDtos" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Müfredatları Seçiniz" PopupHeight="350px">
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
            </div>
            <div class="col-12">
                <div class="form-row">
                    <SfTextBox @ref="DersKod" Placeholder="Ders Kod" CssClass="e-small col-sm-3"></SfTextBox>
                    <SfTextBox @ref="DersAd" Placeholder="Ders Ad" CssClass="e-small col-sm-6"></SfTextBox>
                    <SfButton Type="submit" OnClick="MufredatDersRefresh" CssClass="e-small e-success col-sm-3">Yenile</SfButton>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <div class="form-row">
                    <SfGrid ID="DersGrid" @ref="DersGrid" DataSource="@DersDtos" RowHeight="20" ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
                        @*<GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>*@
                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                        <GridColumns>
                            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                            <GridColumn Visible="false" Field=@nameof(DersDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Kod) HeaderText="Ders Kodu"></GridColumn>
                            <GridColumn Field=@nameof(DersDto.Ad) HeaderText="Ders Adı"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Zorunlu) HeaderText="Z"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Kredi) HeaderText="Krd"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Akts) HeaderText="Akts"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Sinif) HeaderText="Sinif"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 text-center">
                <SfProgressButton OnClick="ConfirmDersleriAc" Content="Seçilenleri Ekle >" CssClass="center-block e-primary">
                    <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
                </SfProgressButton>
            </div>
        </div>
    </div>
    @*Right part*@
    <div class="col-sm-12 col-md-6">
        <div class="row">
            <div class="col-sm-12 text-center">
                <p>Açılan Dersler</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-6">
                <div class="form-row pb-1">
                    <SfMultiSelect @ref="CokluFakulte2" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Fakulteleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@fakulteDtos2" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Fakulteleri Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="Fakulte2ToBolum2"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfMultiSelect @ref="CokluBolum2" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Bölümleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@bolumDtos2" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Bölümleri Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="Bolum2ToProgram2"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <SfMultiSelect @ref="CokluProgram2" TValue="int[]" CssClass="e-small col-sm-12" MaximumSelectionLength=1 Placeholder="Programları Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@programDtos2" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Programları Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="Program2ToMufredat2"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>

                    <SfMultiSelect @ref="CokluSinif2" TValue="int[]" CssClass="e-small col-sm-12" Placeholder="Sınıfları Seçiniz" Mode="@VisualMode.CheckBox" DataSource="@sinifDtos" ShowSelectAll="true" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Sınıfları Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="RestControlChange"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
            </div>
            <div class="col-sm-12 col-md-6">
                <div class="form-row">
                    <SfMultiSelect @ref="CokluDonem2" TValue="int[]" MaximumSelectionLength=1 CssClass="e-small kirmizi col-sm-12" Placeholder="Dönemleri Seçiniz" Mode="@VisualMode.Delimiter" DataSource="@donemDtos2" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Dönemleri Seçiniz" PopupHeight="350px">
                        <MultiSelectEvents TValue="int[]" ValueChange="RestControlChange"></MultiSelectEvents>
                        <MultiSelectFieldSettings Text="Ad" Value="Id"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                </div>
            </div>
            <div class="col-12">
                <div class="form-row">
                    <SfTextBox @ref="DersKod2" OnChange="RestControlChange" Placeholder="Ders Kod" CssClass="e-small col-sm-3"></SfTextBox>
                    <SfTextBox @ref="DersAd2" OnChange="RestControlChange" Placeholder="Ders Ad" CssClass="e-small col-sm-6"></SfTextBox>
                    @*<SfButton Type="submit" OnClick="MufredatDersRefresh" CssClass="e-success col-sm-3">Yenile</SfButton>*@
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <div class="form-row">
                    <SfGrid ID="DersAcGrid" @ref="DersAcGrid" DataSource="@DersAcDtos" RowHeight="20" ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowExcelExport="true" AllowPdfExport="true">
                        @*<GridEvents OnActionComplete="ActionCompletedHandler" TValue="ProgramDto"></GridEvents>*@
                        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                        <GridColumns>
                            <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                            <GridColumn Visible="false" Field=@nameof(DersDto.Id) HeaderText="Ders ID" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Kod) HeaderText="Ders Kodu"></GridColumn>
                            <GridColumn Field=@nameof(DersDto.Ad) HeaderText="Ders Adı"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Zorunlu) HeaderText="Z"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Kredi) HeaderText="Krd"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Akts) HeaderText="Akts"></GridColumn>
                            <GridColumn AutoFit="true" Field=@nameof(DersDto.Sinif) HeaderText="Sinif"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>

            </div>
        </div>
    </div>

</div>


<MatDialog @bind-IsOpen="@dersAcConfirm" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Ders Açma İşlemi</MatDialogTitle>
    <MatDialogContent>
        Ders açma işlemini gerçekleştirmek istiyor musunuz?
        @if (NotEqualControls.Count > 0)
        {
            <div class="col-12">
                <p>Eşit olmayan kontroller ver yinede devam etmek istiyor musunuz?</p>
            </div>
        }
    <div class="col-12">
        @foreach (var item in NotEqualControls)
        {
        <div class="col-12">
            <p>@(item.ToString())</p>
        </div>
                
                }
            </div>
</MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dersAcConfirm = false; NotEqualControls = new List<string>(); })">Kapat</MatButton>
        <MatButton OnClick="@SecilenDersleriAc">Onayla</MatButton>
    </MatDialogActions>
</MatDialog>


<MatDialog @bind-IsOpen="@uyariShow" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Uyarı</MatDialogTitle>
    <MatDialogContent>
        <p>@uyariText</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { uyariShow = false; willUyari = false; uyariText = null; })">Kapat</MatButton>
    </MatDialogActions>
</MatDialog>


@code{

    SfMultiSelect<int[]> CokluFakulte;
    SfMultiSelect<int[]> CokluBolum;
    SfMultiSelect<int[]> CokluProgram;
    SfMultiSelect<int[]> CokluMufredat;
    SfMultiSelect<int[]> CokluDonem;
    SfMultiSelect<int[]> CokluSinif;

    SfMultiSelect<int[]> CokluFakulte2;
    SfMultiSelect<int[]> CokluBolum2;
    SfMultiSelect<int[]> CokluProgram2;
    SfMultiSelect<int[]> CokluDonem2;
    SfMultiSelect<int[]> CokluSinif2;



    SfCheckBox isIntibak;
    SfCheckBox isActive;

    SfTextBox DersAd;
    SfTextBox DersKod;

    SfTextBox DersAd2;
    SfTextBox DersKod2;

    //class Forvalidation
    //{
    //    public int[] seciliFakulteler = null;
    //    public int[] seciliBolumler;
    //    public int[] seciliProgramlar;
    //    public int[] seciliMufredatlar;
    //    public int[] seciliDonemler;
    //    public int[] seciliSiniflar;
    //}

    //Forvalidation forvalidation = new Forvalidation();





    List<FakulteDto> fakulteDtos = new List<FakulteDto>();
    List<BolumDto> bolumDtos = new List<BolumDto>();
    List<ProgramDto> programDtos = new List<ProgramDto>();
    List<MufredatDto> mufredatDtos = new List<MufredatDto>();
    List<DonemDto> donemDtos = new List<DonemDto>();


    List<FakulteDto> fakulteDtos2 = new List<FakulteDto>();
    List<BolumDto> bolumDtos2 = new List<BolumDto>();
    List<ProgramDto> programDtos2 = new List<ProgramDto>();
    List<DonemDto> donemDtos2 = new List<DonemDto>();

    List<SinifDto> sinifDtos = new List<SinifDto>
{
        new SinifDto() { Ad = "0", Id = 0 },
        new SinifDto() { Ad = "1", Id = 1 },
        new SinifDto() { Ad = "2", Id = 2 },
        new SinifDto() { Ad = "3", Id = 3 },
        new SinifDto() { Ad = "4", Id = 4 },
        new SinifDto() { Ad = "5", Id = 5 },
        new SinifDto() { Ad = "6", Id = 6 },
        new SinifDto() { Ad = "7", Id = 7 },
        new SinifDto() { Ad = "8", Id = 8 },
        new SinifDto() { Ad = "9", Id = 9 },
    };


    bool uyariShow;
    string uyariText = "";


    protected override async Task OnInitializedAsync()
    {
        await ReadFakultes();
        await ReadDonems();



    }


    async Task ReadFakultes()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/fakulte");

        if (apiResponse.StatusCode == Status200OK)
        {
            fakulteDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<FakulteDto[]>(apiResponse.Result.ToString()).ToList<FakulteDto>();
            fakulteDtos2 = fakulteDtos.DeepClone();
            if (fakulteDtos.Count > 1)
            {
                fakulteDtos.Insert(0, new FakulteDto() { Ad = "Tümü", Id = 55555 });
                fakulteDtos2.Insert(0, new FakulteDto() { Ad = "Tümü", Id = 55555 });
            }

        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "fakulte getirilirken hata oluştu!");
        }
    }

    private async void FakulteToBolum(MultiSelectChangeEventArgs<int[]> args)
    {
        //seciliFakulteler = args.Value;

        if (args.Value == null)
        {
            bolumDtos = new List<BolumDto>();
            programDtos = new List<ProgramDto>();
            mufredatDtos = new List<MufredatDto>();
            StateHasChanged();
        }
        else
        {
            await ReadBolums();
        }

    }

    private async void Fakulte2ToBolum2(MultiSelectChangeEventArgs<int[]> args)
    {
        //Fakulte değiştiği anda gridi sil
        DersAcDtos = new List<DersAcilanDto>();

        if (args.Value == null)
        {
            bolumDtos2 = new List<BolumDto>();
            programDtos2 = new List<ProgramDto>();
            StateHasChanged();
        }
        else
        {
            await ReadBolums2();
        }

    }


    async Task ReadBolums()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/bolum/GetBolumByFakulteIds/" + string.Join(',', CokluFakulte.Value));

        if (apiResponse.StatusCode == Status200OK)
        {
            bolumDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<BolumDto[]>(apiResponse.Result.ToString()).ToList<BolumDto>();
            if (bolumDtos.Count > 0)
            {
                bolumDtos.Insert(0, new BolumDto() { Ad = "Tümü", Id = 55555 });

            }
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm getirilirken hata oluştu!");
        }
    }

    async Task ReadBolums2()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/bolum/GetBolumByFakulteIds/" + string.Join(',', CokluFakulte2.Value));

        if (apiResponse.StatusCode == Status200OK)
        {
            bolumDtos2 = Newtonsoft.Json.JsonConvert.DeserializeObject<BolumDto[]>(apiResponse.Result.ToString()).ToList<BolumDto>();
            if (bolumDtos2.Count > 0)
            {
                bolumDtos2.Insert(0, new BolumDto() { Ad = "Tümü", Id = 55555 });

            }
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Bölüm getirilirken hata oluştu!");
        }
    }

    private async void BolumToProgram(MultiSelectChangeEventArgs<int[]> args)
    {

        if (args.Value == null)
        {
            programDtos = new List<ProgramDto>();
            mufredatDtos = new List<MufredatDto>();
            StateHasChanged();
        }
        else
        {
            //Yanda bolum kontrolunu böylde değişebilin
            //bolumDtos2 = bolumDtos;
            //CokluBolum2Value = args.Value;
            //StateHasChanged();

            await ReadPrograms();
        }
    }

    private async void Bolum2ToProgram2(MultiSelectChangeEventArgs<int[]> args)
    {
        //Bolum değiştiği anda gridi sil
        DersAcDtos = new List<DersAcilanDto>();
        if (args.Value == null)
        {
            programDtos2 = new List<ProgramDto>();
            StateHasChanged();
        }
        else
        {
            await ReadPrograms2();
        }
    }

    async Task ReadPrograms()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/program/GetProgramByBolumIds/" + string.Join(',', CokluBolum.Value));

        if (apiResponse.StatusCode == Status200OK)
        {
            programDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto[]>(apiResponse.Result.ToString()).ToList<ProgramDto>();
            if (programDtos.Count > 0)
            {
                programDtos.Insert(0, new ProgramDto() { Ad = "Tümü", Id = 55555 });
            }

            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "program getirilirken hata oluştu!");
        }
    }

    async Task ReadPrograms2()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/program/GetProgramByBolumIds/" + string.Join(',', CokluBolum2.Value));

        if (apiResponse.StatusCode == Status200OK)
        {
            programDtos2 = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto[]>(apiResponse.Result.ToString()).ToList<ProgramDto>();
            if (programDtos2.Count > 0)
            {
                programDtos2.Insert(0, new ProgramDto() { Ad = "Tümü", Id = 55555 });
            }

            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "program getirilirken hata oluştu!");
        }
    }

    private async void ProgramToMufredat(MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value == null)
        {
            mufredatDtos = new List<MufredatDto>();
            StateHasChanged();
        }
        else
        {
            await ReadMufredats();
        }
    }

    private async void Program2ToMufredat2(MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            await GetAcilanDersler();
        }
    }


    async Task ReadMufredats()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/mufredat/GetMufredatByProgramIds/" + string.Join(',', CokluProgram.Value));

        if (apiResponse.StatusCode == Status200OK)
        {
            mufredatDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto[]>(apiResponse.Result.ToString()).ToList<MufredatDto>();
            if (mufredatDtos.Count > 0)
            {
                mufredatDtos.Insert(0, new MufredatDto() { Ad = "Tümü", Id = 55555 });
            }
            StateHasChanged();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "mufredat getirilirken hata oluştu!");
        }
    }


    async Task ReadDonems()
    {
        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/donem");

        if (apiResponse.StatusCode == Status200OK)
        {
            donemDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<DonemDto[]>(apiResponse.Result.ToString()).ToList<DonemDto>();
            //donemDtos.Insert(0,new DonemDto() { Ad = "Tümü", Id = 55555 });
            donemDtos2 = donemDtos.DeepClone();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Donem getirilirken hata oluştu!");
        }
    }

    async Task RestControlChange()
    {
        await GetAcilanDersler();
    }


    public bool ShowSelectAllCheckBox { get; set; } = false;
    public bool EnableSelectionOrders { get; set; } = false;
    public bool EnableDropDownIcon { get; set; } = true;
    private bool checkSelectAll { get; set; } = true;
    private bool dropdownButton { get; set; } = true;
    private bool selectionReorder { get; set; } = true;


    //MufredatGrid

    SfGrid<DersDto> DersGrid;
    SfGrid<DersAcilanDto> DersAcGrid;
    public List<DersDto> DersDtos = new List<DersDto>();
    public List<DersAcilanDto> DersAcDtos = new List<DersAcilanDto>();

    bool dersAcConfirm = false;

    bool willUyari;

    async Task ValidateFirstControls()
    {
        if (CokluFakulte.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat fakülte seçimi yapınız,";
        }
        if (CokluBolum.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat bölüm seçimi yapınız,";
        }
        if (CokluProgram.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat program seçimi yapınız,";
        }
        if (CokluMufredat.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat mufredat seçimi yapınız,";
        }
        if (CokluDonem.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat dönem seçimi yapınız,";
        }
        if (CokluSinif.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen müfredat sınıf seçimi yapınız,";
        }
    }

    async Task ValidateSecondControls()
    {
        if (CokluFakulte2.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen açılacak fakülte seçimi yapınız,";
        }
        if (CokluBolum2.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen açılacak bölüm seçimi yapınız,";
        }
        if (CokluProgram2.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen açılacak program seçimi yapınız,";
        }

        if (CokluDonem2.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen açılacak dönem seçimi yapınız,";
        }
        if (CokluSinif2.Value == null)
        {
            willUyari = true;
            uyariText += "Lütfen açılacak sınıf seçimi yapınız,";
        }
    }

    async Task MufredatDersRefresh()
    {
        await ValidateFirstControls();

        if (willUyari)
        {
            uyariShow = true;
        }
        else
        {

            DersFilterDto dersFilterDto = new DersFilterDto();
            dersFilterDto.MufredatSecilen = CokluMufredat.Value;
            dersFilterDto.MufredatSecenektekiler = mufredatDtos.Select(x => x.Id);
            dersFilterDto.DonemSecilen = Convert.ToInt32(CokluDonem.Value.First());
            dersFilterDto.SinifSecilen = CokluSinif.Value;//Array.ConvertAll(CokluSinif.Value, int.Parse);
            dersFilterDto.IsIntibak = isIntibak.Checked;
            dersFilterDto.IsActive = isActive.Checked;
            dersFilterDto.DersAd = DersAd.Value;
            dersFilterDto.DersKod = DersKod.Value;

            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/ders/GetAcilacakDersByFilterDto", dersFilterDto);

            //ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/ders");
            DersDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<DersDto[]>(apiResponse.Result.ToString()).ToList<DersDto>();
            //DersAcDtos = new List<DersAcilanDto>();
        }

    }


    async Task GetAcilanDersler()
    {
        DersAcilanFilterDto dersAcilanFilterDto = new DersAcilanFilterDto();
        dersAcilanFilterDto.ProgramSecilen = CokluProgram2.Value;
        dersAcilanFilterDto.ProgramSecenektekiler = programDtos2.Select(x => x.Id);
        dersAcilanFilterDto.DonemSecilen = CokluDonem2.Value==null? 0 : CokluDonem2.Value.First();
        dersAcilanFilterDto.SinifSecilen = CokluSinif2.Value;
        dersAcilanFilterDto.DersAd = DersAd2.Value;
        dersAcilanFilterDto.DersKod = DersKod2.Value;

        ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/dersacilan/GetAcilanDersByFilterDto", dersAcilanFilterDto);

        DersAcDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<DersAcilanDto[]>(apiResponse.Result.ToString()).ToList<DersAcilanDto>();
        StateHasChanged();
    }


    //async Task SeciliDersleriSagla()
    //{
    //    ////get selected derses and addrange existing Dersacilans
    //    //List<DersDto> dersRows = await DersGrid.GetSelectedRecords();
    //    //DersAcDtos.AddRange(dersRows);
    //    //go store and replicate as dersAc
    //    await ConfirmDersleriAc();
    //}

    List<string> NotEqualControls = new List<string>();
    async Task ConfirmDersleriAc()
    {
        await ValidateFirstControls();
        await ValidateSecondControls();
        if (willUyari)
        {
            uyariShow = true;
        }
        else
        {

            if (CokluFakulte.Value?.First() != CokluFakulte2.Value?.First())
            {
                NotEqualControls.Add("Fakülteler eşit değil");
            }
            if (CokluBolum.Value?.First() != CokluBolum2.Value?.First())
            {
                NotEqualControls.Add("bölümler eşit değil");
            }
            if (CokluProgram.Value?.First() != CokluProgram2.Value?.First())
            {
                NotEqualControls.Add("programlar eşit değil");
            }
            if (CokluDonem.Value?.First() != CokluDonem2.Value?.First())
            {
                NotEqualControls.Add("Dönemler eşit değil");
            }
            Array.Sort(CokluSinif.Value);
            Array.Sort(CokluSinif2.Value);
            if (!(CokluSinif.Value.SequenceEqual(CokluSinif2.Value))) //   string.Join("", CokluSinif.Value) != string.Join("", CokluSinif2.Value)
            {
                NotEqualControls.Add("Sınıflar eşit değil");
            }

            dersAcConfirm = true;
        }


    }

    async Task SecilenDersleriAc()
    {
        //call api make the rest
        //IEnumerable<int> dersAcIds = DersAcDtos.Select(x=>x.Id);

        DersAcDto dersAcDto = new DersAcDto();
        dersAcDto.DersAcIds = (await DersGrid.GetSelectedRecords()).Select(x => x.Id);
        dersAcDto.RefProgramSecilen = CokluProgram.Value.First();
        dersAcDto.RefProgramSecenektekiler = programDtos.Select(x => x.Id);
        dersAcDto.AcProgramSecilen = CokluProgram2.Value.First();
        dersAcDto.AcProgramSecenektekiler = programDtos2.Select(x => x.Id);
        dersAcDto.AcDonemSecilen = CokluDonem2.Value.First();

        ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/dersacilan/CreateDersAcilanByDers", dersAcDto);

        //herşey bittimi
        dersAcConfirm = false;
        NotEqualControls = new List<string>();
        await GetAcilanDersler();
    }

}
<style>
    .property-section .e-checkbox-wrapper {
        margin: 10px;
    }

    .control-section.checkbox {
        margin-top: 20px;
    }

    .multiselect-checkbox {
        width: 70%;
        margin-left: 70px;
    }
</style>

@page "/mufredat"
@inject HttpClient Http;
@using Semerkand.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using System.Net
@using Newtonsoft.Json
@inject AppState appState
<style>
    .e-DoubleArrowRight:before {
        content: '\e7bb';
        color: #e83e8c;
    }
</style>

<ControlSection>

    <SfGrid Width="100%" @ref="MufredatGrid" ID="MufredatGrid" ShowColumnChooser="true" DataSource="@mufredatDtos" AllowSorting="true" AllowFiltering="true" AllowPaging="true" Toolbar="Toolbaritems"
            ContextMenuItems="@(new List<ContextMenuItemModel>() { new ContextMenuItemModel { Text = "Ders Tanımla", Target = ".e-content", Id = "copywithheader" } })">

        <GridEvents ContextMenuItemClicked="OnContextMenuClick" CommandClicked="CommandClickHandler" OnToolbarClick="ToolbarClickHandler" OnActionComplete="ActionCompletedHandler" TValue="MufredatDto"></GridEvents>
        <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridColumns>
            <GridColumn AutoFit="true" Visible="false" Field=@nameof(MufredatDto.Id) HeaderText="Müfredat ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn AutoFit="true" Field=@nameof(MufredatDto.Ad) AllowEditing="true" HeaderText="Müfredat İsim" ValidationRules="@(new { required=true})"></GridColumn>
            <GridColumn AutoFit="true" Field=@nameof(MufredatDto.Yil) HeaderText="Müfredat Yıl" ValidationRules="@(new { required=true})"></GridColumn>
            <GridColumn AutoFit="true" Field=@nameof(MufredatDto.BasTarih) HeaderText="BasTarih" EditType="EditType.DatePickerEdit" ValidationRules="@(new { required=true})"></GridColumn>
            <GridColumn AutoFit="true" Field=@nameof(MufredatDto.BitTarih) HeaderText="Bit Tarih" EditType="EditType.DatePickerEdit"></GridColumn>
            <GridColumn Field=@nameof(MufredatDto.KararTarih) HeaderText="KararTarih" EditType="EditType.DatePickerEdit"></GridColumn>
            <GridColumn Field=@nameof(HarcDto.ProgramId) HeaderText="Program" ForeignKeyValue="Ad" ForeignKeyField="Id" DataSource="@programDtos"></GridColumn>
            <GridColumn HeaderText="Manage Records">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.None" Title="DersOlus" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-DoubleArrowRight", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.None" Title="Clone" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-copy", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-update", CssClass="e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    @*<input type="text" @bind-value="appState.MufredatState.Ad" />*@
</ControlSection>

    <MatDialog @bind-IsOpen="@multiDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
        <MatDialogContent>
            "@mufredatDto.Ad" isimli müfredatı çoklamak istediğinize emin misiniz?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { multiDialogOpen = false; })">Kapat</MatButton>
            <MatButton OnClick="@MultiplyRecord">Çokla</MatButton>
        </MatDialogActions>
    </MatDialog>

    @code{
        SfGrid<MufredatDto> MufredatGrid;

        public MufredatDto mufredatDto { get; set; } = new MufredatDto(); // Holds Mufredat being actively modified or created
                                                                          //[CascadingParameter]
                                                                          //public MufredatDto SelectedMufredat { get; set; }


        List<MufredatDto> mufredatDtos = new List<MufredatDto>();
        List<ProgramDto> programDtos = new List<ProgramDto>();

        private List<Object> Toolbaritems = new List<Object>() { "Add", "Search", "Paste", "Copy", "ColumnChooser", new ItemModel() { Text = "Ders Oluştur", TooltipText = "Click", PrefixIcon = "e-icons e-DoubleArrowRight", Id = "DersOlustur" } };

        bool multiDialogOpen = false;

        protected override async Task OnInitializedAsync()
        {
            await ReadFakultes();
            ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/program");
            programDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<ProgramDto[]>(apiResponse.Result.ToString()).ToList<ProgramDto>();
        }

        async Task ReadFakultes()
        {

            ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/mufredat");

            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success, "Müfredatler getirildi");
                mufredatDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto[]>(apiResponse.Result.ToString()).ToList<MufredatDto>();
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat bilgisi getirilirken hata oluştu!");
            }
        }

        public async Task MultiplyRecord()
        {
            try
            {
                ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/mufredat/Cokla/" + mufredatDto.Id);
                if (apiResponse.StatusCode == Status200OK)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success);
                    await ReadFakultes();
                }
                else
                {
                    //TODO Ahmet 1**
                    //TODO Ahmet 2**
                    mufredatDtos.Remove(mufredatDto);
                    MufredatGrid.Refresh();
                    matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Creation Failed");
                }
            }
            catch (Exception ex)
            {
                //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
                //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

                mufredatDtos.Remove(mufredatDto);
                MufredatGrid.Refresh();
                matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Creation Failed");
            }
            finally
            {
                MufredatGrid.Refresh();
            }
        }

        //Sağ Click için
        public void OnContextMenuClick(ContextMenuClickEventArgs args)
        {
            if (args.Item.Id == "copywithheader")
            {
                //this.DefaultGrid.Copy(true);
            }
        }


        public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
        {
            if (args.Item.Id == "DersOlustur")
            {
                //You can customized your code here....
            }
        }

        public void CommandClickHandler(CommandClickEventArgs<MufredatDto> args)
        {
            //Perform your custom command button click operation here. And also with the value in “args” you can differentiate the buttons, if having multiple custom command buttons.

            if (args.CommandColumn.Title == "Clone")
            {
                mufredatDto = args.RowData;
                multiDialogOpen = true;
            }
            if (args.CommandColumn.Title == "DersOlus")
            {
                mufredatDto = args.RowData;
                //appState.MufredatState = mufredatDto.DeepClone();
                mufredatDto.Program = programDtos.FirstOrDefault(x => x.Id == mufredatDto.ProgramId);
                if (mufredatDto.Program == null)
                {
                    matToaster.Add("Program Bulunamadı", MatToastType.Danger, "Müfredat ders ekleme hatası");
                    return;
                }
                appState.MufredatState = mufredatDto;
                //base.InvokeAsync(StateHasChanged);
                TabDegis.InvokeAsync(1);

            }
        }

        [Parameter]
        public EventCallback<int> TabDegis { get; set; }



        public void ActionCompletedHandler(ActionEventArgs<MufredatDto> args)
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                if (args.Action == "edit")
                {
                    Update(args.Data);
                }
                else if (args.Action == "add")
                {
                    Create(args.Data);
                }

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                Delete(args.Data);
            }
        }

        public async Task Create(MufredatDto mufredatDto)
        {
            try
            {
                ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                    ("api/mufredat", mufredatDto);
                if (apiResponse.StatusCode == Status200OK)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success);
                    var recordedDto = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto>(apiResponse.Result.ToString());

                    mufredatDtos.FirstOrDefault(x => x.Id == 0).Id = recordedDto.Id;
                    MufredatGrid.Refresh();
                    //base.InvokeAsync(StateHasChanged);
                }
                else
                {
                    mufredatDtos.Remove(mufredatDto);
                    MufredatGrid.Refresh();
                    matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Creation Failed");
                }
            }
            catch (Exception ex)
            {
                mufredatDtos.Remove(mufredatDto);
                MufredatGrid.Refresh();
                matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Creation Failed");
            }
        }


        public async void Update(MufredatDto mufredatDto)
        {
            //this updates the IsCompleted flag only
            try
            {
                ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                    ("api/mufredat", mufredatDto);

                if (!apiResponse.IsError)
                {
                    matToaster.Add(apiResponse.Message, MatToastType.Success);
                }
                else
                {
                    matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Save Failed");
                    //update failed gridi boz !
                }
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Save Failed");
                //update failed gridi boz !
            }
        }

        public async Task Delete(MufredatDto mufredatDto)
        {
            try
            {
                var response = await Http.DeleteAsync("api/mufredat/" + mufredatDto.Id);
                if (response.StatusCode == (HttpStatusCode)Status200OK)
                {
                    matToaster.Add("Müfredat Deleted", MatToastType.Success);
                    mufredatDtos.Remove(mufredatDto);
                }
                else
                {
                    matToaster.Add("Müfredat Delete Failed: " + response.StatusCode, MatToastType.Danger);
                }
                //deleteDialogOpen = false;
            }
            catch (Exception ex)
            {
                matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
            }
        }

    }

@page "/mufredat"
@inject HttpClient Http;
@using Semerkand.Shared.Dto.Definitions
@inject IMatToaster matToaster
@using Syncfusion.Blazor.DropDowns
@using System.Net
@using Newtonsoft.Json

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="MufredatGrid" DataSource="@mufredatDtos" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowSorting="true" AllowFiltering="true" AllowPaging="true">
                <GridEvents OnActionComplete="ActionCompletedHandler" TValue="MufredatDto"></GridEvents>
                <GridEditSettings ShowDeleteConfirmDialog="true" AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridColumns>
                    <GridColumn Visible="false" Field=@nameof(MufredatDto.Id) HeaderText="Müfredat ID" AllowEditing="false" IsIdentity="true" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(MufredatDto.Ad) HeaderText="Müfredat İsim" ValidationRules="@(new { required=true})" Width="170"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{
    SfGrid<MufredatDto> MufredatGrid;

    List<MufredatDto> mufredatDtos = new List<MufredatDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReadFakultes();

    }

    async Task ReadFakultes()
    {

        ApiResponseDto apiResponse = await Http.GetFromJsonAsync<ApiResponseDto>("api/mufredat");

        if (apiResponse.StatusCode == Status200OK)
        {
            matToaster.Add(apiResponse.Message, MatToastType.Success, "Müfredatler getirildi");
            mufredatDtos = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto[]>(apiResponse.Result.ToString()).ToList<MufredatDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat bilgisi getirilirken hata oluştu!");
        }
    }

    public void ActionCompletedHandler(ActionEventArgs<MufredatDto>
        args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (args.Action == "edit")
            {
                Update(args.Data);
            }
            else if (args.Action == "add")
            {
                Create(args.Data);
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            Delete(args.Data);
        }
    }

    public async Task Create(MufredatDto mufredatDto)
    {
        try
        {
            ApiResponseDto apiResponse = await Http.PostJsonAsync<ApiResponseDto>
                ("api/mufredat", mufredatDto);
            if (apiResponse.StatusCode == Status200OK)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
                //todo = Newtonsoft.Json.JsonConvert.DeserializeObject<MufredatDto>
                //(apiResponse.Result.ToString());
                //todos.Add(todo);
                //todo = new TodoDto(); //reset todo after insert
            }
            else
            {
                //TODO Ahmet 1**
                //TODO Ahmet 2**
                mufredatDtos.Remove(mufredatDto);
                MufredatGrid.Refresh();
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Creation Failed");
            }
        }
        catch (Exception ex)
        {
            //TODO Ahmet 1**: liste içinden değinde gride eklediğini sil demeli !!
            //TODO Ahmet 2**: Dbden hata geldiği zaman Bu hata sebebini mantıklı şekilde buraya vermemiz gerekiyor. Aynı Idli kayıt gönder patlatıyon.

            mufredatDtos.Remove(mufredatDto);
            MufredatGrid.Refresh();
            matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Creation Failed");
        }
    }


    public async void Update(MufredatDto mufredatDto)
    {
        //this updates the IsCompleted flag only
        try
        {
            ApiResponseDto apiResponse = await Http.PutJsonAsync<ApiResponseDto>
                ("api/mufredat", mufredatDto);

            if (!apiResponse.IsError)
            {
                matToaster.Add(apiResponse.Message, MatToastType.Success);
            }
            else
            {
                matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Müfredat Save Failed");
                //update failed gridi boz !
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Müfredat Save Failed");
            //update failed gridi boz !
        }
    }

    public async Task Delete(MufredatDto mufredatDto)
    {
        try
        {
            var response = await Http.DeleteAsync("api/mufredat/" + mufredatDto.Id);
            if (response.StatusCode == (HttpStatusCode)Status200OK)
            {
                matToaster.Add("Müfredat Deleted", MatToastType.Success);
                mufredatDtos.Remove(mufredatDto);
            }
            else
            {
                matToaster.Add("Müfredat Delete Failed: " + response.StatusCode, MatToastType.Danger);
            }
            //deleteDialogOpen = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Universite Save Failed");
        }
    }

}
